// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgStruct.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgStruct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgProto {

namespace {

const ::google::protobuf::Descriptor* Suint32Pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Suint32Pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* SKeyValuePair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SKeyValuePair_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldView_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldNodeHandler_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldNodeHandler_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldNodeVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldNodeVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldArmy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldArmy_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WorldArmy_EState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WorldArmy_MoveType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WorldMine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldMine_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WorldMine_EState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WorldNpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldNpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldCity_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldTower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldTower_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBoss_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleSoldier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleSoldier_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleArmy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleArmy_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleBuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleBuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleCity_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleCityVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleCityVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleFightTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleFightTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResPlunder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResPlunder_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoldierOverView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoldierOverView_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoldierDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoldierDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArmyFightDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArmyFightDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightReport_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FightReport_EResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FightReport_EFightType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ResReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightReportMini_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightReportMini_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FightReportMini_EResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InvestReportMini_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvestReportMini_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArmyInvestReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArmyInvestReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResInvestReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResInvestReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvestigationReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvestigationReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportDB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EProtoVersion_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAttrTypeDef_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EKeyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EObjectType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EResOwner_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgStruct_2eproto() {
  protobuf_AddDesc_MsgStruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgStruct.proto");
  GOOGLE_CHECK(file != NULL);
  Suint32Pair_descriptor_ = file->message_type(0);
  static const int Suint32Pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Suint32Pair, m_etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Suint32Pair, m_uvalue_),
  };
  Suint32Pair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Suint32Pair_descriptor_,
      Suint32Pair::default_instance_,
      Suint32Pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Suint32Pair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Suint32Pair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Suint32Pair));
  SKeyValuePair_descriptor_ = file->message_type(1);
  static const int SKeyValuePair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKeyValuePair, m_ukey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKeyValuePair, m_uvalue_),
  };
  SKeyValuePair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SKeyValuePair_descriptor_,
      SKeyValuePair::default_instance_,
      SKeyValuePair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKeyValuePair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKeyValuePair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SKeyValuePair));
  RoleData_descriptor_ = file->message_type(2);
  static const int RoleData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleData, m_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleData, m_ulastloing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleData, m_strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleData, m_cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleData, m_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleData, m_attackpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleData, m_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleData, m_photoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleData, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleData, m_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleData, m_exp_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleData, m_exp_vip_),
  };
  RoleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleData_descriptor_,
      RoleData::default_instance_,
      RoleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleData));
  TimeInfo_descriptor_ = file->message_type(3);
  static const int TimeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInfo, m_leftsecond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInfo, m_dsttime_),
  };
  TimeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeInfo_descriptor_,
      TimeInfo::default_instance_,
      TimeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeInfo));
  WorldPos_descriptor_ = file->message_type(4);
  static const int WorldPos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldPos, m_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldPos, m_y_),
  };
  WorldPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldPos_descriptor_,
      WorldPos::default_instance_,
      WorldPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldPos));
  WorldView_descriptor_ = file->message_type(5);
  static const int WorldView_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldView, m_pos_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldView, m_pos_to_),
  };
  WorldView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldView_descriptor_,
      WorldView::default_instance_,
      WorldView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldView));
  WorldNodeHandler_descriptor_ = file->message_type(6);
  static const int WorldNodeHandler_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldNodeHandler, m_etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldNodeHandler, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldNodeHandler, m_tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldNodeHandler, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldNodeHandler, m_view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldNodeHandler, m_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldNodeHandler, m_army_ids_),
  };
  WorldNodeHandler_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldNodeHandler_descriptor_,
      WorldNodeHandler::default_instance_,
      WorldNodeHandler_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldNodeHandler, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldNodeHandler, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldNodeHandler));
  WorldNodeVector_descriptor_ = file->message_type(7);
  static const int WorldNodeVector_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldNodeVector, m_nodes_),
  };
  WorldNodeVector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldNodeVector_descriptor_,
      WorldNodeVector::default_instance_,
      WorldNodeVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldNodeVector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldNodeVector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldNodeVector));
  WorldArmy_descriptor_ = file->message_type(8);
  static const int WorldArmy_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldArmy, m_uarmyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldArmy, m_uroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldArmy, m_ucityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldArmy, m_estate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldArmy, m_view_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldArmy, m_view_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldArmy, m_umovespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldArmy, m_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldArmy, m_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldArmy, m_owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldArmy, m_mt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldArmy, m_fight_res_),
  };
  WorldArmy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldArmy_descriptor_,
      WorldArmy::default_instance_,
      WorldArmy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldArmy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldArmy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldArmy));
  WorldArmy_EState_descriptor_ = WorldArmy_descriptor_->enum_type(0);
  WorldArmy_MoveType_descriptor_ = WorldArmy_descriptor_->enum_type(1);
  WorldMine_descriptor_ = file->message_type(9);
  static const int WorldMine_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldMine, m_etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldMine, m_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldMine, m_umineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldMine, m_utableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldMine, m_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldMine, m_owner_),
  };
  WorldMine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldMine_descriptor_,
      WorldMine::default_instance_,
      WorldMine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldMine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldMine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldMine));
  WorldMine_EState_descriptor_ = WorldMine_descriptor_->enum_type(0);
  WorldNpc_descriptor_ = file->message_type(10);
  static const int WorldNpc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldNpc, m_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldNpc, m_unpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldNpc, m_utableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldNpc, m_owner_),
  };
  WorldNpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldNpc_descriptor_,
      WorldNpc::default_instance_,
      WorldNpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldNpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldNpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldNpc));
  WorldCity_descriptor_ = file->message_type(11);
  static const int WorldCity_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldCity, m_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldCity, m_ucityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldCity, m_utableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldCity, m_uroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldCity, m_strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldCity, m_slevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldCity, m_owner_),
  };
  WorldCity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldCity_descriptor_,
      WorldCity::default_instance_,
      WorldCity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldCity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldCity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldCity));
  WorldTower_descriptor_ = file->message_type(12);
  static const int WorldTower_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldTower, m_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldTower, m_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldTower, m_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldTower, m_army_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldTower, m_owner_),
  };
  WorldTower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldTower_descriptor_,
      WorldTower::default_instance_,
      WorldTower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldTower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldTower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldTower));
  WorldBoss_descriptor_ = file->message_type(13);
  static const int WorldBoss_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBoss, m_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBoss, m_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBoss, m_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBoss, m_hp_),
  };
  WorldBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBoss_descriptor_,
      WorldBoss::default_instance_,
      WorldBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBoss));
  RoleSoldier_descriptor_ = file->message_type(14);
  static const int RoleSoldier_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSoldier, m_usoldierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSoldier, m_usoldiernum_),
  };
  RoleSoldier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleSoldier_descriptor_,
      RoleSoldier::default_instance_,
      RoleSoldier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSoldier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSoldier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleSoldier));
  RoleArmy_descriptor_ = file->message_type(15);
  static const int RoleArmy_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleArmy, m_move_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleArmy, m_soldier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleArmy, m_load_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleArmy, m_res_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleArmy, m_res_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleArmy, m_res_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleArmy, m_move_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleArmy, m_build_resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleArmy, m_invest_),
  };
  RoleArmy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleArmy_descriptor_,
      RoleArmy::default_instance_,
      RoleArmy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleArmy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleArmy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleArmy));
  RoleBuild_descriptor_ = file->message_type(16);
  static const int RoleBuild_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBuild, m_buildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBuild, m_finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBuild, m_buildtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBuild, m_builditem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBuild, m_builditemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBuild, m_hp_),
  };
  RoleBuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleBuild_descriptor_,
      RoleBuild::default_instance_,
      RoleBuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleBuild));
  RoleCity_descriptor_ = file->message_type(17);
  static const int RoleCity_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCity, m_ucityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCity, m_uroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCity, m_utableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCity, m_strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCity, m_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCity, m_food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCity, m_iron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCity, m_crystal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCity, m_armys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCity, m_soldier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCity, m_build_),
  };
  RoleCity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleCity_descriptor_,
      RoleCity::default_instance_,
      RoleCity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleCity));
  RoleCityVector_descriptor_ = file->message_type(18);
  static const int RoleCityVector_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCityVector, m_citys_),
  };
  RoleCityVector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleCityVector_descriptor_,
      RoleCityVector::default_instance_,
      RoleCityVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCityVector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCityVector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleCityVector));
  RoleFightTitle_descriptor_ = file->message_type(19);
  static const int RoleFightTitle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFightTitle, m_strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFightTitle, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFightTitle, m_pos_),
  };
  RoleFightTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleFightTitle_descriptor_,
      RoleFightTitle::default_instance_,
      RoleFightTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFightTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFightTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleFightTitle));
  ResPlunder_descriptor_ = file->message_type(20);
  static const int ResPlunder_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPlunder, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPlunder, m_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPlunder, m_lost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPlunder, m_get_),
  };
  ResPlunder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResPlunder_descriptor_,
      ResPlunder::default_instance_,
      ResPlunder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPlunder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResPlunder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResPlunder));
  SoldierOverView_descriptor_ = file->message_type(21);
  static const int SoldierOverView_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierOverView, m_power_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierOverView, m_power_army_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierOverView, m_power_talent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierOverView, m_power_equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierOverView, m_power_tech_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierOverView, m_power_tower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierOverView, m_power_lose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierOverView, m_soldier_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierOverView, m_soldier_kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierOverView, m_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierOverView, m_soldier_die_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierOverView, m_dies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierOverView, m_soldier_hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierOverView, m_hurts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierOverView, m_soldier_live_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierOverView, m_lives_),
  };
  SoldierOverView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoldierOverView_descriptor_,
      SoldierOverView::default_instance_,
      SoldierOverView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierOverView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierOverView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoldierOverView));
  SoldierDetail_descriptor_ = file->message_type(22);
  static const int SoldierDetail_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierDetail, m_soldierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierDetail, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierDetail, m_die_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierDetail, m_hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierDetail, m_live_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierDetail, m_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierDetail, m_attack_com_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierDetail, m_attack_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierDetail, m_damage_com_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierDetail, m_damage_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierDetail, m_damages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierDetail, m_kills_),
  };
  SoldierDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoldierDetail_descriptor_,
      SoldierDetail::default_instance_,
      SoldierDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldierDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoldierDetail));
  ArmyFightDetail_descriptor_ = file->message_type(23);
  static const int ArmyFightDetail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyFightDetail, m_soldiers_),
  };
  ArmyFightDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArmyFightDetail_descriptor_,
      ArmyFightDetail::default_instance_,
      ArmyFightDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyFightDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyFightDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArmyFightDetail));
  FightReport_descriptor_ = file->message_type(24);
  static const int FightReport_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReport, m_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReport, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReport, m_pos_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReport, m_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReport, m_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReport, m_attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReport, m_defer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReport, m_plunder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReport, m_att_view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReport, m_def_view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReport, m_att_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReport, m_def_details_),
  };
  FightReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightReport_descriptor_,
      FightReport::default_instance_,
      FightReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightReport));
  FightReport_EResult_descriptor_ = FightReport_descriptor_->enum_type(0);
  FightReport_EFightType_descriptor_ = FightReport_descriptor_->enum_type(1);
  ResReport_descriptor_ = file->message_type(25);
  static const int ResReport_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResReport, m_tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResReport, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResReport, m_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResReport, m_timestamp_),
  };
  ResReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResReport_descriptor_,
      ResReport::default_instance_,
      ResReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResReport));
  FightReportMini_descriptor_ = file->message_type(26);
  static const int FightReportMini_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReportMini, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReportMini, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReportMini, m_lose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReportMini, m_kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReportMini, m_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReportMini, m_res_sum_),
  };
  FightReportMini_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightReportMini_descriptor_,
      FightReportMini::default_instance_,
      FightReportMini_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReportMini, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightReportMini, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightReportMini));
  FightReportMini_EResult_descriptor_ = FightReportMini_descriptor_->enum_type(0);
  InvestReportMini_descriptor_ = file->message_type(27);
  static const int InvestReportMini_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestReportMini, m_is_succed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestReportMini, m_cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestReportMini, m_view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestReportMini, m_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestReportMini, m_armys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestReportMini, m_dv_cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestReportMini, m_dv_sum_),
  };
  InvestReportMini_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvestReportMini_descriptor_,
      InvestReportMini::default_instance_,
      InvestReportMini_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestReportMini, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestReportMini, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvestReportMini));
  ArmyInvestReport_descriptor_ = file->message_type(28);
  static const int ArmyInvestReport_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyInvestReport, m_soldiers_),
  };
  ArmyInvestReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArmyInvestReport_descriptor_,
      ArmyInvestReport::default_instance_,
      ArmyInvestReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyInvestReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmyInvestReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArmyInvestReport));
  ResInvestReport_descriptor_ = file->message_type(29);
  static const int ResInvestReport_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResInvestReport, m_res_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResInvestReport, m_res_get_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResInvestReport, m_res_unget_),
  };
  ResInvestReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResInvestReport_descriptor_,
      ResInvestReport::default_instance_,
      ResInvestReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResInvestReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResInvestReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResInvestReport));
  InvestigationReport_descriptor_ = file->message_type(30);
  static const int InvestigationReport_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestigationReport, m_is_succed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestigationReport, m_cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestigationReport, m_view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestigationReport, m_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestigationReport, m_armys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestigationReport, m_dv_cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestigationReport, m_dv_sum_),
  };
  InvestigationReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvestigationReport_descriptor_,
      InvestigationReport::default_instance_,
      InvestigationReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestigationReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestigationReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvestigationReport));
  ReportDB_descriptor_ = file->message_type(31);
  static const int ReportDB_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDB, m_roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDB, m_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDB, m_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDB, m_fight_mini_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDB, m_fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDB, m_invest_),
  };
  ReportDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportDB_descriptor_,
      ReportDB::default_instance_,
      ReportDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportDB));
  EProtoVersion_descriptor_ = file->enum_type(0);
  EItemType_descriptor_ = file->enum_type(1);
  EAttrTypeDef_descriptor_ = file->enum_type(2);
  EKeyType_descriptor_ = file->enum_type(3);
  EObjectType_descriptor_ = file->enum_type(4);
  EResOwner_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgStruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Suint32Pair_descriptor_, &Suint32Pair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SKeyValuePair_descriptor_, &SKeyValuePair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleData_descriptor_, &RoleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeInfo_descriptor_, &TimeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldPos_descriptor_, &WorldPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldView_descriptor_, &WorldView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldNodeHandler_descriptor_, &WorldNodeHandler::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldNodeVector_descriptor_, &WorldNodeVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldArmy_descriptor_, &WorldArmy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldMine_descriptor_, &WorldMine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldNpc_descriptor_, &WorldNpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldCity_descriptor_, &WorldCity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldTower_descriptor_, &WorldTower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBoss_descriptor_, &WorldBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleSoldier_descriptor_, &RoleSoldier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleArmy_descriptor_, &RoleArmy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleBuild_descriptor_, &RoleBuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleCity_descriptor_, &RoleCity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleCityVector_descriptor_, &RoleCityVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleFightTitle_descriptor_, &RoleFightTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResPlunder_descriptor_, &ResPlunder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoldierOverView_descriptor_, &SoldierOverView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoldierDetail_descriptor_, &SoldierDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArmyFightDetail_descriptor_, &ArmyFightDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightReport_descriptor_, &FightReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResReport_descriptor_, &ResReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightReportMini_descriptor_, &FightReportMini::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvestReportMini_descriptor_, &InvestReportMini::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArmyInvestReport_descriptor_, &ArmyInvestReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResInvestReport_descriptor_, &ResInvestReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvestigationReport_descriptor_, &InvestigationReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportDB_descriptor_, &ReportDB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgStruct_2eproto() {
  delete Suint32Pair::default_instance_;
  delete Suint32Pair_reflection_;
  delete SKeyValuePair::default_instance_;
  delete SKeyValuePair_reflection_;
  delete RoleData::default_instance_;
  delete RoleData_reflection_;
  delete TimeInfo::default_instance_;
  delete TimeInfo_reflection_;
  delete WorldPos::default_instance_;
  delete WorldPos_reflection_;
  delete WorldView::default_instance_;
  delete WorldView_reflection_;
  delete WorldNodeHandler::default_instance_;
  delete WorldNodeHandler_reflection_;
  delete WorldNodeVector::default_instance_;
  delete WorldNodeVector_reflection_;
  delete WorldArmy::default_instance_;
  delete WorldArmy_reflection_;
  delete WorldMine::default_instance_;
  delete WorldMine_reflection_;
  delete WorldNpc::default_instance_;
  delete WorldNpc_reflection_;
  delete WorldCity::default_instance_;
  delete WorldCity_reflection_;
  delete WorldTower::default_instance_;
  delete WorldTower_reflection_;
  delete WorldBoss::default_instance_;
  delete WorldBoss_reflection_;
  delete RoleSoldier::default_instance_;
  delete RoleSoldier_reflection_;
  delete RoleArmy::default_instance_;
  delete RoleArmy_reflection_;
  delete RoleBuild::default_instance_;
  delete RoleBuild_reflection_;
  delete RoleCity::default_instance_;
  delete RoleCity_reflection_;
  delete RoleCityVector::default_instance_;
  delete RoleCityVector_reflection_;
  delete RoleFightTitle::default_instance_;
  delete RoleFightTitle_reflection_;
  delete ResPlunder::default_instance_;
  delete ResPlunder_reflection_;
  delete SoldierOverView::default_instance_;
  delete SoldierOverView_reflection_;
  delete SoldierDetail::default_instance_;
  delete SoldierDetail_reflection_;
  delete ArmyFightDetail::default_instance_;
  delete ArmyFightDetail_reflection_;
  delete FightReport::default_instance_;
  delete FightReport_reflection_;
  delete ResReport::default_instance_;
  delete ResReport_reflection_;
  delete FightReportMini::default_instance_;
  delete FightReportMini_reflection_;
  delete InvestReportMini::default_instance_;
  delete InvestReportMini_reflection_;
  delete ArmyInvestReport::default_instance_;
  delete ArmyInvestReport_reflection_;
  delete ResInvestReport::default_instance_;
  delete ResInvestReport_reflection_;
  delete InvestigationReport::default_instance_;
  delete InvestigationReport_reflection_;
  delete ReportDB::default_instance_;
  delete ReportDB_reflection_;
}

void protobuf_AddDesc_MsgStruct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017MsgStruct.proto\022\010MsgProto\"Q\n\013Suint32Pa"
    "ir\022-\n\007m_eType\030\001 \001(\0162\022.MsgProto.EKeyType:"
    "\010EKT_Base\022\023\n\010m_uValue\030\002 \001(\r:\0010\"7\n\rSKeyVa"
    "luePair\022\021\n\006m_uKey\030\001 \001(\r:\0010\022\023\n\010m_uValue\030\002"
    " \001(\r:\0010\"\206\002\n\010RoleData\022\020\n\005m_uID\030\001 \001(\r:\0010\022\027"
    "\n\014m_uLastLoing\030\002 \001(\r:\0010\022\021\n\tm_strName\030\003 \001"
    "(\014\022\023\n\010m_cityid\030\004 \001(\r:\0010\022\021\n\006m_gold\030\010 \001(\r:"
    "\0010\022\030\n\rm_attackpower\030\t \001(\r:\0010\022\020\n\005m_sex\030\n "
    "\001(\r:\0010\022\024\n\tm_photoid\030\013 \001(\r:\0010\022\022\n\007m_level\030"
    "\014 \001(\r:\0010\022\020\n\005m_vip\030\r \001(\r:\0010\022\026\n\013m_exp_leve"
    "l\030\016 \001(\r:\0010\022\024\n\tm_exp_vip\030\017 \001(\r:\0010\"9\n\010Time"
    "Info\022\027\n\014m_leftsecond\030\001 \001(\r:\0010\022\024\n\tm_dstti"
    "me\030\002 \001(\r:\0010\"*\n\010WorldPos\022\016\n\003m_x\030\001 \001(\r:\0010\022"
    "\016\n\003m_y\030\002 \001(\r:\0010\"Y\n\tWorldView\022&\n\nm_pos_fr"
    "om\030\001 \001(\0132\022.MsgProto.WorldPos\022$\n\010m_pos_to"
    "\030\002 \001(\0132\022.MsgProto.WorldPos\"\310\001\n\020WorldNode"
    "Handler\022.\n\007m_etype\030\001 \001(\0162\025.MsgProto.EObj"
    "ectType:\006E_army\022\017\n\004m_id\030\002 \001(\r:\0010\022\024\n\tm_ta"
    "bleid\030\003 \001(\r:\0010\022\023\n\010m_roleid\030\004 \001(\r:\0010\022#\n\006m"
    "_view\030\005 \001(\0132\023.MsgProto.WorldView\022\017\n\004m_hp"
    "\030\006 \001(\r:\0010\022\022\n\nm_army_ids\030\007 \003(\r\">\n\017WorldNo"
    "deVector\022+\n\007m_nodes\030\t \003(\0132\032.MsgProto.Wor"
    "ldNodeHandler\"\357\004\n\tWorldArmy\022\024\n\tm_uArmyID"
    "\030\001 \001(\r:\0010\022\024\n\tm_uRoleID\030\002 \001(\r:\0010\022\024\n\tm_uCi"
    "tyID\030\003 \001(\r:\0010\0226\n\010m_eState\030\004 \001(\0162\032.MsgPro"
    "to.WorldArmy.EState:\010E_MoveTo\022(\n\013m_view_"
    "from\030\005 \001(\0132\023.MsgProto.WorldView\022&\n\tm_vie"
    "w_to\030\006 \001(\0132\023.MsgProto.WorldView\022\027\n\014m_uMo"
    "veSpeed\030\007 \001(\r:\0010\022\"\n\006m_time\030\010 \001(\0132\022.MsgPr"
    "oto.TimeInfo\022&\n\005m_res\030\t \003(\0132\027.MsgProto.S"
    "KeyValuePair\022,\n\007m_owner\030\n \001(\0162\023.MsgProto"
    ".EResOwner:\006E_None\0224\n\004m_mt\030\013 \001(\0162\034.MsgPr"
    "oto.WorldArmy.MoveType:\010mt_fight\022\026\n\013m_fi"
    "ght_res\030\014 \001(\r:\0010\"\200\001\n\006EState\022\014\n\010E_MoveTo\020"
    "\000\022\016\n\nE_BackCity\020\001\022\r\n\tE_GetMine\020\002\022\013\n\007E_Fi"
    "ght\020\003\022\n\n\006E_Hold\020\004\022\r\n\tE_HoldNpc\020\005\022\020\n\014E_Ar"
    "riveHome\020\006\022\017\n\013E_HoldTower\020\007\"2\n\010MoveType\022"
    "\014\n\010mt_fight\020\000\022\n\n\006mt_get\020\001\022\014\n\010mt_touch\020\002\""
    "\363\001\n\tWorldMine\0223\n\007m_etype\030\001 \001(\0162\032.MsgProt"
    "o.WorldMine.EState:\006E_Free\022\"\n\005m_pos\030\002 \001("
    "\0132\023.MsgProto.WorldView\022\024\n\tm_uMineID\030\003 \001("
    "\r:\0010\022\025\n\nm_uTableID\030\004 \001(\r:\0010\022\017\n\004m_hp\030\005 \001("
    "\r:\0010\022,\n\007m_owner\030\006 \001(\0162\023.MsgProto.EResOwn"
    "er:\006E_None\"!\n\006EState\022\n\n\006E_Free\020\000\022\013\n\007E_Ho"
    "lde\020\001\"\210\001\n\010WorldNpc\022\"\n\005m_pos\030\001 \001(\0132\023.MsgP"
    "roto.WorldView\022\023\n\010m_uNpcID\030\002 \001(\r:\0010\022\025\n\nm"
    "_uTableID\030\003 \001(\r:\0010\022,\n\007m_owner\030\004 \001(\0162\023.Ms"
    "gProto.EResOwner:\006E_None\"\310\001\n\tWorldCity\022\""
    "\n\005m_pos\030\001 \001(\0132\023.MsgProto.WorldView\022\024\n\tm_"
    "uCityID\030\002 \001(\r:\0010\022\025\n\nm_uTableID\030\003 \001(\r:\0010\022"
    "\024\n\tm_uRoleID\030\004 \001(\r:\0010\022\021\n\tm_strName\030\005 \001(\014"
    "\022\023\n\010m_sLevel\030\006 \001(\r:\0010\022,\n\007m_owner\030\007 \001(\0162\023"
    ".MsgProto.EResOwner:\006E_None\"\226\001\n\nWorldTow"
    "er\022\"\n\005m_pos\030\001 \001(\0132\023.MsgProto.WorldView\022\020"
    "\n\005m_gid\030\002 \001(\r:\0010\022\020\n\005m_tid\030\003 \001(\r:\0010\022\022\n\nm_"
    "army_ids\030\004 \003(\r\022,\n\007m_owner\030\007 \001(\0162\023.MsgPro"
    "to.EResOwner:\006E_None\"d\n\tWorldBoss\022\"\n\005m_p"
    "os\030\001 \001(\0132\023.MsgProto.WorldView\022\020\n\005m_gid\030\002"
    " \001(\r:\0010\022\020\n\005m_tid\030\003 \001(\r:\0010\022\017\n\004m_hp\030\004 \001(\r:"
    "\0010\"@\n\013RoleSoldier\022\027\n\014m_uSoldierID\030\001 \001(\r:"
    "\0010\022\030\n\rm_uSoldierNum\030\002 \001(\r:\0010\"\212\002\n\010RoleArm"
    "y\022#\n\006m_move\030\001 \001(\0132\023.MsgProto.WorldArmy\022("
    "\n\tm_soldier\030\002 \003(\0132\025.MsgProto.RoleSoldier"
    "\022\023\n\013m_load_base\030\003 \001(\r\022\020\n\010m_res_id\030\004 \001(\r\022"
    "\021\n\tm_res_num\030\005 \001(\r\022\023\n\013m_res_speed\030\006 \001(\r\022"
    "\025\n\rm_move_length\030\007 \001(\002\022\030\n\rm_build_resid\030"
    "\010 \001(\r:\0010\022/\n\010m_invest\030\t \001(\0132\035.MsgProto.In"
    "vestigationReport\"\270\001\n\tRoleBuild\022\024\n\tm_bui"
    "ldid\030\001 \001(\r:\0010\022(\n\014m_finishtime\030\002 \001(\0132\022.Ms"
    "gProto.TimeInfo\022\'\n\013m_buildtime\030\003 \001(\0132\022.M"
    "sgProto.TimeInfo\022\026\n\013m_builditem\030\005 \001(\r:\0010"
    "\022\031\n\016m_builditemnum\030\006 \001(\r:\0010\022\017\n\004m_hp\030\007 \001("
    "\r:\0010\"\265\002\n\010RoleCity\022\024\n\tm_uCityID\030\001 \001(\r:\0010\022"
    "\024\n\tm_uRoleID\030\002 \001(\r:\0010\022\025\n\nm_uTableID\030\003 \001("
    "\r:\0010\022\021\n\tm_strName\030\004 \001(\014\022\"\n\005m_pos\030\005 \001(\0132\023"
    ".MsgProto.WorldView\022\021\n\006m_food\030\006 \001(\r:\0010\022\021"
    "\n\006m_iron\030\007 \001(\r:\0010\022\024\n\tm_crystal\030\010 \001(\r:\0010\022"
    "#\n\007m_armys\030\t \003(\0132\022.MsgProto.RoleArmy\022(\n\t"
    "m_soldier\030\n \003(\0132\025.MsgProto.RoleSoldier\022$"
    "\n\007m_build\030\013 \003(\0132\023.MsgProto.RoleBuild\"5\n\016"
    "RoleCityVector\022#\n\007m_citys\030\001 \003(\0132\022.MsgPro"
    "to.RoleCity\"Z\n\016RoleFightTitle\022\021\n\tm_strNa"
    "me\030\001 \001(\014\022\022\n\007m_level\030\002 \001(\r:\0010\022!\n\005m_pos\030\003 "
    "\001(\0132\022.MsgProto.WorldPos\"T\n\nResPlunder\022\017\n"
    "\004m_id\030\001 \001(\r:\0010\022\020\n\005m_sum\030\002 \001(\r:\0010\022\021\n\006m_lo"
    "st\030\003 \001(\r:\0010\022\020\n\005m_get\030\004 \001(\r:\0010\"\357\003\n\017Soldie"
    "rOverView\022\026\n\013m_power_sum\030\001 \001(\r:\0010\022\027\n\014m_p"
    "ower_army\030\002 \001(\r:\0010\022\031\n\016m_power_talent\030\003 \001"
    "(\r:\0010\022\030\n\rm_power_equip\030\004 \001(\r:\0010\022\027\n\014m_pow"
    "er_tech\030\005 \001(\r:\0010\022\030\n\rm_power_tower\030\006 \001(\r:"
    "\0010\022\027\n\014m_power_lose\030\007 \001(\r:\0010\022\030\n\rm_soldier"
    "_sum\030\010 \001(\r:\0010\022\031\n\016m_soldier_kill\030\t \001(\r:\0010"
    "\022(\n\007m_kills\030\n \003(\0132\027.MsgProto.SKeyValuePa"
    "ir\022\030\n\rm_soldier_die\030\013 \001(\r:\0010\022\'\n\006m_dies\030\014"
    " \003(\0132\027.MsgProto.SKeyValuePair\022\031\n\016m_soldi"
    "er_hurt\030\r \001(\r:\0010\022(\n\007m_hurts\030\016 \003(\0132\027.MsgP"
    "roto.SKeyValuePair\022\031\n\016m_soldier_live\030\017 \001"
    "(\r:\0010\022(\n\007m_lives\030\020 \003(\0132\027.MsgProto.SKeyVa"
    "luePair\"\304\002\n\rSoldierDetail\022\026\n\013m_soldierid"
    "\030\001 \001(\r:\0010\022\020\n\005m_num\030\002 \001(\r:\0010\022\020\n\005m_die\030\003 \001"
    "(\r:\0010\022\021\n\006m_hurt\030\004 \001(\r:\0010\022\021\n\006m_live\030\005 \001(\r"
    ":\0010\022\023\n\010m_damage\030\006 \001(\r:\0010\022\027\n\014m_attack_com"
    "\030\007 \001(\r:\0010\022\031\n\016m_attack_skill\030\010 \001(\r:\0010\022\027\n\014"
    "m_damage_com\030\t \001(\r:\0010\022\031\n\016m_damage_skill\030"
    "\n \001(\r:\0010\022*\n\tm_damages\030\013 \003(\0132\027.MsgProto.S"
    "KeyValuePair\022(\n\007m_kills\030\014 \003(\0132\027.MsgProto"
    ".SKeyValuePair\">\n\017ArmyFightDetail\022+\n\nm_s"
    "oldiers\030\001 \003(\0132\027.MsgProto.SoldierDetail\"\263"
    "\005\n\013FightReport\022@\n\010m_result\030\001 \001(\0162\035.MsgPr"
    "oto.FightReport.EResult:\017city_attack_win"
    "\022;\n\006m_type\030\002 \001(\0162 .MsgProto.FightReport."
    "EFightType:\teft_tcity\022&\n\nm_pos_from\030\003 \001("
    "\0132\022.MsgProto.WorldPos\022\021\n\006m_time\030\004 \001(\r:\0010"
    "\022\022\n\007m_round\030\005 \001(\r:\0010\022,\n\nm_attacker\030\006 \001(\013"
    "2\030.MsgProto.RoleFightTitle\022)\n\007m_defer\030\007 "
    "\001(\0132\030.MsgProto.RoleFightTitle\022\'\n\tm_plund"
    "er\030\010 \003(\0132\024.MsgProto.ResPlunder\022-\n\nm_att_"
    "view\030\t \001(\0132\031.MsgProto.SoldierOverView\022-\n"
    "\nm_def_view\030\n \001(\0132\031.MsgProto.SoldierOver"
    "View\0220\n\rm_att_details\030\013 \003(\0132\031.MsgProto.A"
    "rmyFightDetail\0220\n\rm_def_details\030\014 \003(\0132\031."
    "MsgProto.ArmyFightDetail\"Y\n\007EResult\022\023\n\017c"
    "ity_attack_win\020\001\022\024\n\020city_attack_lose\020\002\022\020"
    "\n\014city_def_win\020\003\022\021\n\rcity_def_lose\020\004\"7\n\nE"
    "FightType\022\r\n\teft_tcity\020\001\022\014\n\010eft_wild\020\002\022\014"
    "\n\010eft_boss\020\003\"h\n\tResReport\022\021\n\tm_tableid\030\001"
    " \001(\r\022\r\n\005m_num\030\002 \001(\r\022!\n\005m_pos\030\003 \001(\0132\022.Msg"
    "Proto.WorldPos\022\026\n\013m_timestamp\030\004 \001(\004:\0010\"\355"
    "\001\n\017FightReportMini\022\017\n\004m_id\030\001 \001(\r:\0010\022<\n\006m"
    "_type\030\002 \001(\0162!.MsgProto.FightReportMini.E"
    "Result:\tfight_ini\022\021\n\006m_lose\030\003 \001(\r:\0010\022\021\n\006"
    "m_kill\030\004 \001(\r:\0010\022\026\n\013m_timestamp\030\005 \001(\004:\0010\022"
    "\024\n\tm_res_sum\030\006 \001(\r:\0010\"7\n\007EResult\022\r\n\tfigh"
    "t_ini\020\000\022\r\n\tfight_win\020\001\022\016\n\nfight_lose\020\002\"\350"
    "\001\n\020InvestReportMini\022\031\n\013m_is_succed\030\001 \001(\010"
    ":\004true\022\023\n\010m_cityid\030\002 \001(\r:\0010\022#\n\006m_view\030\003 "
    "\001(\0132\023.MsgProto.WorldView\022(\n\005m_res\030\004 \003(\0132"
    "\031.MsgProto.ResInvestReport\022+\n\007m_armys\030\005 "
    "\003(\0132\032.MsgProto.ArmyInvestReport\022\023\n\010m_dv_"
    "cur\030\006 \001(\r:\0010\022\023\n\010m_dv_sum\030\007 \001(\r:\0010\"=\n\020Arm"
    "yInvestReport\022)\n\nm_soldiers\030\001 \003(\0132\025.MsgP"
    "roto.RoleSoldier\"V\n\017ResInvestReport\022\025\n\nm"
    "_res_type\030\001 \001(\r:\0010\022\024\n\tm_res_get\030\002 \001(\r:\0010"
    "\022\026\n\013m_res_unget\030\003 \001(\r:\0010\"\353\001\n\023Investigati"
    "onReport\022\031\n\013m_is_succed\030\001 \001(\010:\004true\022\023\n\010m"
    "_cityid\030\002 \001(\r:\0010\022#\n\006m_view\030\003 \001(\0132\023.MsgPr"
    "oto.WorldView\022(\n\005m_res\030\004 \003(\0132\031.MsgProto."
    "ResInvestReport\022+\n\007m_armys\030\005 \003(\0132\032.MsgPr"
    "oto.ArmyInvestReport\022\023\n\010m_dv_cur\030\006 \001(\r:\001"
    "0\022\023\n\010m_dv_sum\030\007 \001(\r:\0010\"\340\001\n\010ReportDB\022\023\n\010m"
    "_roleid\030\001 \001(\r:\0010\022\021\n\006m_time\030\002 \001(\004:\0010\022\"\n\005m"
    "_res\030\003 \001(\0132\023.MsgProto.ResReport\022/\n\014m_fig"
    "ht_mini\030\004 \001(\0132\031.MsgProto.FightReportMini"
    "\022&\n\007m_fight\030\005 \001(\0132\025.MsgProto.FightReport"
    "\022/\n\010m_invest\030\006 \001(\0132\035.MsgProto.Investigat"
    "ionReport*#\n\rEProtoVersion\022\022\n\016EPV_CurVer"
    "sion\020\002*>\n\tEItemType\022\n\n\006E_null\020\000\022\n\n\006E_foo"
    "d\020\001\022\n\n\006E_iron\020\002\022\r\n\tE_crystal\020\003*\234\002\n\014EAttr"
    "TypeDef\022\021\n\rget_food_perh\020e\022\021\n\rget_iron_p"
    "erh\020f\022\024\n\020get_crystal_perh\020g\022\025\n\021product_f"
    "ood_perh\020h\022\025\n\021product_iron_perh\020i\022\030\n\024pro"
    "duct_crystal_perh\020j\022\024\n\020storage_food_max\020"
    "k\022\024\n\020storage_iron_max\020l\022\027\n\023storage_cryst"
    "al_max\020m\022\024\n\020protect_food_max\020n\022\024\n\020protec"
    "t_iron_max\020o\022\027\n\023protect_crystal_max\020p*\030\n"
    "\010EKeyType\022\014\n\010EKT_Base\020\000*V\n\013EObjectType\022\n"
    "\n\006E_army\020\001\022\013\n\007E_build\020\002\022\n\n\006E_mine\020\003\022\t\n\005E"
    "_npc\020\004\022\n\n\006E_boss\020\005\022\013\n\007E_tower\020\006*\?\n\tEResO"
    "wner\022\n\n\006E_None\020\000\022\n\n\006E_self\020\001\022\014\n\010E_friend"
    "\020\002\022\014\n\010E_enermy\020\003", 6776);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgStruct.proto", &protobuf_RegisterTypes);
  Suint32Pair::default_instance_ = new Suint32Pair();
  SKeyValuePair::default_instance_ = new SKeyValuePair();
  RoleData::default_instance_ = new RoleData();
  TimeInfo::default_instance_ = new TimeInfo();
  WorldPos::default_instance_ = new WorldPos();
  WorldView::default_instance_ = new WorldView();
  WorldNodeHandler::default_instance_ = new WorldNodeHandler();
  WorldNodeVector::default_instance_ = new WorldNodeVector();
  WorldArmy::default_instance_ = new WorldArmy();
  WorldMine::default_instance_ = new WorldMine();
  WorldNpc::default_instance_ = new WorldNpc();
  WorldCity::default_instance_ = new WorldCity();
  WorldTower::default_instance_ = new WorldTower();
  WorldBoss::default_instance_ = new WorldBoss();
  RoleSoldier::default_instance_ = new RoleSoldier();
  RoleArmy::default_instance_ = new RoleArmy();
  RoleBuild::default_instance_ = new RoleBuild();
  RoleCity::default_instance_ = new RoleCity();
  RoleCityVector::default_instance_ = new RoleCityVector();
  RoleFightTitle::default_instance_ = new RoleFightTitle();
  ResPlunder::default_instance_ = new ResPlunder();
  SoldierOverView::default_instance_ = new SoldierOverView();
  SoldierDetail::default_instance_ = new SoldierDetail();
  ArmyFightDetail::default_instance_ = new ArmyFightDetail();
  FightReport::default_instance_ = new FightReport();
  ResReport::default_instance_ = new ResReport();
  FightReportMini::default_instance_ = new FightReportMini();
  InvestReportMini::default_instance_ = new InvestReportMini();
  ArmyInvestReport::default_instance_ = new ArmyInvestReport();
  ResInvestReport::default_instance_ = new ResInvestReport();
  InvestigationReport::default_instance_ = new InvestigationReport();
  ReportDB::default_instance_ = new ReportDB();
  Suint32Pair::default_instance_->InitAsDefaultInstance();
  SKeyValuePair::default_instance_->InitAsDefaultInstance();
  RoleData::default_instance_->InitAsDefaultInstance();
  TimeInfo::default_instance_->InitAsDefaultInstance();
  WorldPos::default_instance_->InitAsDefaultInstance();
  WorldView::default_instance_->InitAsDefaultInstance();
  WorldNodeHandler::default_instance_->InitAsDefaultInstance();
  WorldNodeVector::default_instance_->InitAsDefaultInstance();
  WorldArmy::default_instance_->InitAsDefaultInstance();
  WorldMine::default_instance_->InitAsDefaultInstance();
  WorldNpc::default_instance_->InitAsDefaultInstance();
  WorldCity::default_instance_->InitAsDefaultInstance();
  WorldTower::default_instance_->InitAsDefaultInstance();
  WorldBoss::default_instance_->InitAsDefaultInstance();
  RoleSoldier::default_instance_->InitAsDefaultInstance();
  RoleArmy::default_instance_->InitAsDefaultInstance();
  RoleBuild::default_instance_->InitAsDefaultInstance();
  RoleCity::default_instance_->InitAsDefaultInstance();
  RoleCityVector::default_instance_->InitAsDefaultInstance();
  RoleFightTitle::default_instance_->InitAsDefaultInstance();
  ResPlunder::default_instance_->InitAsDefaultInstance();
  SoldierOverView::default_instance_->InitAsDefaultInstance();
  SoldierDetail::default_instance_->InitAsDefaultInstance();
  ArmyFightDetail::default_instance_->InitAsDefaultInstance();
  FightReport::default_instance_->InitAsDefaultInstance();
  ResReport::default_instance_->InitAsDefaultInstance();
  FightReportMini::default_instance_->InitAsDefaultInstance();
  InvestReportMini::default_instance_->InitAsDefaultInstance();
  ArmyInvestReport::default_instance_->InitAsDefaultInstance();
  ResInvestReport::default_instance_->InitAsDefaultInstance();
  InvestigationReport::default_instance_->InitAsDefaultInstance();
  ReportDB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgStruct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgStruct_2eproto {
  StaticDescriptorInitializer_MsgStruct_2eproto() {
    protobuf_AddDesc_MsgStruct_2eproto();
  }
} static_descriptor_initializer_MsgStruct_2eproto_;
const ::google::protobuf::EnumDescriptor* EProtoVersion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EProtoVersion_descriptor_;
}
bool EProtoVersion_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EItemType_descriptor_;
}
bool EItemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAttrTypeDef_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAttrTypeDef_descriptor_;
}
bool EAttrTypeDef_IsValid(int value) {
  switch(value) {
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EKeyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EKeyType_descriptor_;
}
bool EKeyType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EObjectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EObjectType_descriptor_;
}
bool EObjectType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EResOwner_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EResOwner_descriptor_;
}
bool EResOwner_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Suint32Pair::kMETypeFieldNumber;
const int Suint32Pair::kMUValueFieldNumber;
#endif  // !_MSC_VER

Suint32Pair::Suint32Pair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.Suint32Pair)
}

void Suint32Pair::InitAsDefaultInstance() {
}

Suint32Pair::Suint32Pair(const Suint32Pair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.Suint32Pair)
}

void Suint32Pair::SharedCtor() {
  _cached_size_ = 0;
  m_etype_ = 0;
  m_uvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Suint32Pair::~Suint32Pair() {
  // @@protoc_insertion_point(destructor:MsgProto.Suint32Pair)
  SharedDtor();
}

void Suint32Pair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Suint32Pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Suint32Pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Suint32Pair_descriptor_;
}

const Suint32Pair& Suint32Pair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

Suint32Pair* Suint32Pair::default_instance_ = NULL;

Suint32Pair* Suint32Pair::New() const {
  return new Suint32Pair;
}

void Suint32Pair::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Suint32Pair*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(m_etype_, m_uvalue_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Suint32Pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.Suint32Pair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgProto.EKeyType m_eType = 1 [default = EKT_Base];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgProto::EKeyType_IsValid(value)) {
            set_m_etype(static_cast< ::MsgProto::EKeyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_uValue;
        break;
      }

      // optional uint32 m_uValue = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_uValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_uvalue_)));
          set_has_m_uvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.Suint32Pair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.Suint32Pair)
  return false;
#undef DO_
}

void Suint32Pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.Suint32Pair)
  // optional .MsgProto.EKeyType m_eType = 1 [default = EKT_Base];
  if (has_m_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->m_etype(), output);
  }

  // optional uint32 m_uValue = 2 [default = 0];
  if (has_m_uvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_uvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.Suint32Pair)
}

::google::protobuf::uint8* Suint32Pair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.Suint32Pair)
  // optional .MsgProto.EKeyType m_eType = 1 [default = EKT_Base];
  if (has_m_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->m_etype(), target);
  }

  // optional uint32 m_uValue = 2 [default = 0];
  if (has_m_uvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_uvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.Suint32Pair)
  return target;
}

int Suint32Pair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgProto.EKeyType m_eType = 1 [default = EKT_Base];
    if (has_m_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m_etype());
    }

    // optional uint32 m_uValue = 2 [default = 0];
    if (has_m_uvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_uvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Suint32Pair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Suint32Pair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Suint32Pair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Suint32Pair::MergeFrom(const Suint32Pair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_etype()) {
      set_m_etype(from.m_etype());
    }
    if (from.has_m_uvalue()) {
      set_m_uvalue(from.m_uvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Suint32Pair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Suint32Pair::CopyFrom(const Suint32Pair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Suint32Pair::IsInitialized() const {

  return true;
}

void Suint32Pair::Swap(Suint32Pair* other) {
  if (other != this) {
    std::swap(m_etype_, other->m_etype_);
    std::swap(m_uvalue_, other->m_uvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Suint32Pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Suint32Pair_descriptor_;
  metadata.reflection = Suint32Pair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SKeyValuePair::kMUKeyFieldNumber;
const int SKeyValuePair::kMUValueFieldNumber;
#endif  // !_MSC_VER

SKeyValuePair::SKeyValuePair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.SKeyValuePair)
}

void SKeyValuePair::InitAsDefaultInstance() {
}

SKeyValuePair::SKeyValuePair(const SKeyValuePair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.SKeyValuePair)
}

void SKeyValuePair::SharedCtor() {
  _cached_size_ = 0;
  m_ukey_ = 0u;
  m_uvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SKeyValuePair::~SKeyValuePair() {
  // @@protoc_insertion_point(destructor:MsgProto.SKeyValuePair)
  SharedDtor();
}

void SKeyValuePair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SKeyValuePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SKeyValuePair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SKeyValuePair_descriptor_;
}

const SKeyValuePair& SKeyValuePair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

SKeyValuePair* SKeyValuePair::default_instance_ = NULL;

SKeyValuePair* SKeyValuePair::New() const {
  return new SKeyValuePair;
}

void SKeyValuePair::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SKeyValuePair*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(m_ukey_, m_uvalue_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SKeyValuePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.SKeyValuePair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 m_uKey = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_ukey_)));
          set_has_m_ukey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_uValue;
        break;
      }

      // optional uint32 m_uValue = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_uValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_uvalue_)));
          set_has_m_uvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.SKeyValuePair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.SKeyValuePair)
  return false;
#undef DO_
}

void SKeyValuePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.SKeyValuePair)
  // optional uint32 m_uKey = 1 [default = 0];
  if (has_m_ukey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_ukey(), output);
  }

  // optional uint32 m_uValue = 2 [default = 0];
  if (has_m_uvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_uvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.SKeyValuePair)
}

::google::protobuf::uint8* SKeyValuePair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.SKeyValuePair)
  // optional uint32 m_uKey = 1 [default = 0];
  if (has_m_ukey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_ukey(), target);
  }

  // optional uint32 m_uValue = 2 [default = 0];
  if (has_m_uvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_uvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.SKeyValuePair)
  return target;
}

int SKeyValuePair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 m_uKey = 1 [default = 0];
    if (has_m_ukey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_ukey());
    }

    // optional uint32 m_uValue = 2 [default = 0];
    if (has_m_uvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_uvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SKeyValuePair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SKeyValuePair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SKeyValuePair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SKeyValuePair::MergeFrom(const SKeyValuePair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ukey()) {
      set_m_ukey(from.m_ukey());
    }
    if (from.has_m_uvalue()) {
      set_m_uvalue(from.m_uvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SKeyValuePair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKeyValuePair::CopyFrom(const SKeyValuePair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKeyValuePair::IsInitialized() const {

  return true;
}

void SKeyValuePair::Swap(SKeyValuePair* other) {
  if (other != this) {
    std::swap(m_ukey_, other->m_ukey_);
    std::swap(m_uvalue_, other->m_uvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SKeyValuePair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SKeyValuePair_descriptor_;
  metadata.reflection = SKeyValuePair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleData::kMUIDFieldNumber;
const int RoleData::kMULastLoingFieldNumber;
const int RoleData::kMStrNameFieldNumber;
const int RoleData::kMCityidFieldNumber;
const int RoleData::kMGoldFieldNumber;
const int RoleData::kMAttackpowerFieldNumber;
const int RoleData::kMSexFieldNumber;
const int RoleData::kMPhotoidFieldNumber;
const int RoleData::kMLevelFieldNumber;
const int RoleData::kMVipFieldNumber;
const int RoleData::kMExpLevelFieldNumber;
const int RoleData::kMExpVipFieldNumber;
#endif  // !_MSC_VER

RoleData::RoleData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.RoleData)
}

void RoleData::InitAsDefaultInstance() {
}

RoleData::RoleData(const RoleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.RoleData)
}

void RoleData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  m_uid_ = 0u;
  m_ulastloing_ = 0u;
  m_strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m_cityid_ = 0u;
  m_gold_ = 0u;
  m_attackpower_ = 0u;
  m_sex_ = 0u;
  m_photoid_ = 0u;
  m_level_ = 0u;
  m_vip_ = 0u;
  m_exp_level_ = 0u;
  m_exp_vip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleData::~RoleData() {
  // @@protoc_insertion_point(destructor:MsgProto.RoleData)
  SharedDtor();
}

void RoleData::SharedDtor() {
  if (m_strname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete m_strname_;
  }
  if (this != default_instance_) {
  }
}

void RoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleData_descriptor_;
}

const RoleData& RoleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

RoleData* RoleData::default_instance_ = NULL;

RoleData* RoleData::New() const {
  return new RoleData;
}

void RoleData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoleData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(m_uid_, m_ulastloing_);
    ZR_(m_cityid_, m_photoid_);
    if (has_m_strname()) {
      if (m_strname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        m_strname_->clear();
      }
    }
  }
  ZR_(m_level_, m_exp_vip_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.RoleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 m_uID = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_uid_)));
          set_has_m_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_uLastLoing;
        break;
      }

      // optional uint32 m_uLastLoing = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_uLastLoing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_ulastloing_)));
          set_has_m_ulastloing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_m_strName;
        break;
      }

      // optional bytes m_strName = 3;
      case 3: {
        if (tag == 26) {
         parse_m_strName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_m_strname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_cityid;
        break;
      }

      // optional uint32 m_cityid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_m_cityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_cityid_)));
          set_has_m_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_m_gold;
        break;
      }

      // optional uint32 m_gold = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_m_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_gold_)));
          set_has_m_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_m_attackpower;
        break;
      }

      // optional uint32 m_attackpower = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_m_attackpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_attackpower_)));
          set_has_m_attackpower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_m_sex;
        break;
      }

      // optional uint32 m_sex = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_m_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_sex_)));
          set_has_m_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_m_photoid;
        break;
      }

      // optional uint32 m_photoid = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_m_photoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_photoid_)));
          set_has_m_photoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_m_level;
        break;
      }

      // optional uint32 m_level = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_m_vip;
        break;
      }

      // optional uint32 m_vip = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_m_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_vip_)));
          set_has_m_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_m_exp_level;
        break;
      }

      // optional uint32 m_exp_level = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_m_exp_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_exp_level_)));
          set_has_m_exp_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_m_exp_vip;
        break;
      }

      // optional uint32 m_exp_vip = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_m_exp_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_exp_vip_)));
          set_has_m_exp_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.RoleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.RoleData)
  return false;
#undef DO_
}

void RoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.RoleData)
  // optional uint32 m_uID = 1 [default = 0];
  if (has_m_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_uid(), output);
  }

  // optional uint32 m_uLastLoing = 2 [default = 0];
  if (has_m_ulastloing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_ulastloing(), output);
  }

  // optional bytes m_strName = 3;
  if (has_m_strname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->m_strname(), output);
  }

  // optional uint32 m_cityid = 4 [default = 0];
  if (has_m_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->m_cityid(), output);
  }

  // optional uint32 m_gold = 8 [default = 0];
  if (has_m_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->m_gold(), output);
  }

  // optional uint32 m_attackpower = 9 [default = 0];
  if (has_m_attackpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->m_attackpower(), output);
  }

  // optional uint32 m_sex = 10 [default = 0];
  if (has_m_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->m_sex(), output);
  }

  // optional uint32 m_photoid = 11 [default = 0];
  if (has_m_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->m_photoid(), output);
  }

  // optional uint32 m_level = 12 [default = 0];
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->m_level(), output);
  }

  // optional uint32 m_vip = 13 [default = 0];
  if (has_m_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->m_vip(), output);
  }

  // optional uint32 m_exp_level = 14 [default = 0];
  if (has_m_exp_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->m_exp_level(), output);
  }

  // optional uint32 m_exp_vip = 15 [default = 0];
  if (has_m_exp_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->m_exp_vip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.RoleData)
}

::google::protobuf::uint8* RoleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.RoleData)
  // optional uint32 m_uID = 1 [default = 0];
  if (has_m_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_uid(), target);
  }

  // optional uint32 m_uLastLoing = 2 [default = 0];
  if (has_m_ulastloing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_ulastloing(), target);
  }

  // optional bytes m_strName = 3;
  if (has_m_strname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->m_strname(), target);
  }

  // optional uint32 m_cityid = 4 [default = 0];
  if (has_m_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->m_cityid(), target);
  }

  // optional uint32 m_gold = 8 [default = 0];
  if (has_m_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->m_gold(), target);
  }

  // optional uint32 m_attackpower = 9 [default = 0];
  if (has_m_attackpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->m_attackpower(), target);
  }

  // optional uint32 m_sex = 10 [default = 0];
  if (has_m_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->m_sex(), target);
  }

  // optional uint32 m_photoid = 11 [default = 0];
  if (has_m_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->m_photoid(), target);
  }

  // optional uint32 m_level = 12 [default = 0];
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->m_level(), target);
  }

  // optional uint32 m_vip = 13 [default = 0];
  if (has_m_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->m_vip(), target);
  }

  // optional uint32 m_exp_level = 14 [default = 0];
  if (has_m_exp_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->m_exp_level(), target);
  }

  // optional uint32 m_exp_vip = 15 [default = 0];
  if (has_m_exp_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->m_exp_vip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.RoleData)
  return target;
}

int RoleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 m_uID = 1 [default = 0];
    if (has_m_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_uid());
    }

    // optional uint32 m_uLastLoing = 2 [default = 0];
    if (has_m_ulastloing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_ulastloing());
    }

    // optional bytes m_strName = 3;
    if (has_m_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->m_strname());
    }

    // optional uint32 m_cityid = 4 [default = 0];
    if (has_m_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_cityid());
    }

    // optional uint32 m_gold = 8 [default = 0];
    if (has_m_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_gold());
    }

    // optional uint32 m_attackpower = 9 [default = 0];
    if (has_m_attackpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_attackpower());
    }

    // optional uint32 m_sex = 10 [default = 0];
    if (has_m_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_sex());
    }

    // optional uint32 m_photoid = 11 [default = 0];
    if (has_m_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_photoid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 m_level = 12 [default = 0];
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_level());
    }

    // optional uint32 m_vip = 13 [default = 0];
    if (has_m_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_vip());
    }

    // optional uint32 m_exp_level = 14 [default = 0];
    if (has_m_exp_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_exp_level());
    }

    // optional uint32 m_exp_vip = 15 [default = 0];
    if (has_m_exp_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_exp_vip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleData::MergeFrom(const RoleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_uid()) {
      set_m_uid(from.m_uid());
    }
    if (from.has_m_ulastloing()) {
      set_m_ulastloing(from.m_ulastloing());
    }
    if (from.has_m_strname()) {
      set_m_strname(from.m_strname());
    }
    if (from.has_m_cityid()) {
      set_m_cityid(from.m_cityid());
    }
    if (from.has_m_gold()) {
      set_m_gold(from.m_gold());
    }
    if (from.has_m_attackpower()) {
      set_m_attackpower(from.m_attackpower());
    }
    if (from.has_m_sex()) {
      set_m_sex(from.m_sex());
    }
    if (from.has_m_photoid()) {
      set_m_photoid(from.m_photoid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_vip()) {
      set_m_vip(from.m_vip());
    }
    if (from.has_m_exp_level()) {
      set_m_exp_level(from.m_exp_level());
    }
    if (from.has_m_exp_vip()) {
      set_m_exp_vip(from.m_exp_vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleData::CopyFrom(const RoleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleData::IsInitialized() const {

  return true;
}

void RoleData::Swap(RoleData* other) {
  if (other != this) {
    std::swap(m_uid_, other->m_uid_);
    std::swap(m_ulastloing_, other->m_ulastloing_);
    std::swap(m_strname_, other->m_strname_);
    std::swap(m_cityid_, other->m_cityid_);
    std::swap(m_gold_, other->m_gold_);
    std::swap(m_attackpower_, other->m_attackpower_);
    std::swap(m_sex_, other->m_sex_);
    std::swap(m_photoid_, other->m_photoid_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_vip_, other->m_vip_);
    std::swap(m_exp_level_, other->m_exp_level_);
    std::swap(m_exp_vip_, other->m_exp_vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleData_descriptor_;
  metadata.reflection = RoleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeInfo::kMLeftsecondFieldNumber;
const int TimeInfo::kMDsttimeFieldNumber;
#endif  // !_MSC_VER

TimeInfo::TimeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.TimeInfo)
}

void TimeInfo::InitAsDefaultInstance() {
}

TimeInfo::TimeInfo(const TimeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.TimeInfo)
}

void TimeInfo::SharedCtor() {
  _cached_size_ = 0;
  m_leftsecond_ = 0u;
  m_dsttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeInfo::~TimeInfo() {
  // @@protoc_insertion_point(destructor:MsgProto.TimeInfo)
  SharedDtor();
}

void TimeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeInfo_descriptor_;
}

const TimeInfo& TimeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

TimeInfo* TimeInfo::default_instance_ = NULL;

TimeInfo* TimeInfo::New() const {
  return new TimeInfo;
}

void TimeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TimeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(m_leftsecond_, m_dsttime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.TimeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 m_leftsecond = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_leftsecond_)));
          set_has_m_leftsecond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_dsttime;
        break;
      }

      // optional uint32 m_dsttime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_dsttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_dsttime_)));
          set_has_m_dsttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.TimeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.TimeInfo)
  return false;
#undef DO_
}

void TimeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.TimeInfo)
  // optional uint32 m_leftsecond = 1 [default = 0];
  if (has_m_leftsecond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_leftsecond(), output);
  }

  // optional uint32 m_dsttime = 2 [default = 0];
  if (has_m_dsttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_dsttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.TimeInfo)
}

::google::protobuf::uint8* TimeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.TimeInfo)
  // optional uint32 m_leftsecond = 1 [default = 0];
  if (has_m_leftsecond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_leftsecond(), target);
  }

  // optional uint32 m_dsttime = 2 [default = 0];
  if (has_m_dsttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_dsttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.TimeInfo)
  return target;
}

int TimeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 m_leftsecond = 1 [default = 0];
    if (has_m_leftsecond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_leftsecond());
    }

    // optional uint32 m_dsttime = 2 [default = 0];
    if (has_m_dsttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_dsttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeInfo::MergeFrom(const TimeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_leftsecond()) {
      set_m_leftsecond(from.m_leftsecond());
    }
    if (from.has_m_dsttime()) {
      set_m_dsttime(from.m_dsttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeInfo::CopyFrom(const TimeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeInfo::IsInitialized() const {

  return true;
}

void TimeInfo::Swap(TimeInfo* other) {
  if (other != this) {
    std::swap(m_leftsecond_, other->m_leftsecond_);
    std::swap(m_dsttime_, other->m_dsttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeInfo_descriptor_;
  metadata.reflection = TimeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldPos::kMXFieldNumber;
const int WorldPos::kMYFieldNumber;
#endif  // !_MSC_VER

WorldPos::WorldPos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.WorldPos)
}

void WorldPos::InitAsDefaultInstance() {
}

WorldPos::WorldPos(const WorldPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.WorldPos)
}

void WorldPos::SharedCtor() {
  _cached_size_ = 0;
  m_x_ = 0u;
  m_y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldPos::~WorldPos() {
  // @@protoc_insertion_point(destructor:MsgProto.WorldPos)
  SharedDtor();
}

void WorldPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldPos_descriptor_;
}

const WorldPos& WorldPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

WorldPos* WorldPos::default_instance_ = NULL;

WorldPos* WorldPos::New() const {
  return new WorldPos;
}

void WorldPos::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorldPos*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(m_x_, m_y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.WorldPos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 m_x = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_x_)));
          set_has_m_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_y;
        break;
      }

      // optional uint32 m_y = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_y_)));
          set_has_m_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.WorldPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.WorldPos)
  return false;
#undef DO_
}

void WorldPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.WorldPos)
  // optional uint32 m_x = 1 [default = 0];
  if (has_m_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_x(), output);
  }

  // optional uint32 m_y = 2 [default = 0];
  if (has_m_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.WorldPos)
}

::google::protobuf::uint8* WorldPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.WorldPos)
  // optional uint32 m_x = 1 [default = 0];
  if (has_m_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_x(), target);
  }

  // optional uint32 m_y = 2 [default = 0];
  if (has_m_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.WorldPos)
  return target;
}

int WorldPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 m_x = 1 [default = 0];
    if (has_m_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_x());
    }

    // optional uint32 m_y = 2 [default = 0];
    if (has_m_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldPos::MergeFrom(const WorldPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_x()) {
      set_m_x(from.m_x());
    }
    if (from.has_m_y()) {
      set_m_y(from.m_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldPos::CopyFrom(const WorldPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldPos::IsInitialized() const {

  return true;
}

void WorldPos::Swap(WorldPos* other) {
  if (other != this) {
    std::swap(m_x_, other->m_x_);
    std::swap(m_y_, other->m_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldPos_descriptor_;
  metadata.reflection = WorldPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldView::kMPosFromFieldNumber;
const int WorldView::kMPosToFieldNumber;
#endif  // !_MSC_VER

WorldView::WorldView()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.WorldView)
}

void WorldView::InitAsDefaultInstance() {
  m_pos_from_ = const_cast< ::MsgProto::WorldPos*>(&::MsgProto::WorldPos::default_instance());
  m_pos_to_ = const_cast< ::MsgProto::WorldPos*>(&::MsgProto::WorldPos::default_instance());
}

WorldView::WorldView(const WorldView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.WorldView)
}

void WorldView::SharedCtor() {
  _cached_size_ = 0;
  m_pos_from_ = NULL;
  m_pos_to_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldView::~WorldView() {
  // @@protoc_insertion_point(destructor:MsgProto.WorldView)
  SharedDtor();
}

void WorldView::SharedDtor() {
  if (this != default_instance_) {
    delete m_pos_from_;
    delete m_pos_to_;
  }
}

void WorldView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldView_descriptor_;
}

const WorldView& WorldView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

WorldView* WorldView::default_instance_ = NULL;

WorldView* WorldView::New() const {
  return new WorldView;
}

void WorldView::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_m_pos_from()) {
      if (m_pos_from_ != NULL) m_pos_from_->::MsgProto::WorldPos::Clear();
    }
    if (has_m_pos_to()) {
      if (m_pos_to_ != NULL) m_pos_to_->::MsgProto::WorldPos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.WorldView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgProto.WorldPos m_pos_from = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_pos_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_m_pos_to;
        break;
      }

      // optional .MsgProto.WorldPos m_pos_to = 2;
      case 2: {
        if (tag == 18) {
         parse_m_pos_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_pos_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.WorldView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.WorldView)
  return false;
#undef DO_
}

void WorldView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.WorldView)
  // optional .MsgProto.WorldPos m_pos_from = 1;
  if (has_m_pos_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_pos_from(), output);
  }

  // optional .MsgProto.WorldPos m_pos_to = 2;
  if (has_m_pos_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_pos_to(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.WorldView)
}

::google::protobuf::uint8* WorldView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.WorldView)
  // optional .MsgProto.WorldPos m_pos_from = 1;
  if (has_m_pos_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_pos_from(), target);
  }

  // optional .MsgProto.WorldPos m_pos_to = 2;
  if (has_m_pos_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_pos_to(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.WorldView)
  return target;
}

int WorldView::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgProto.WorldPos m_pos_from = 1;
    if (has_m_pos_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_pos_from());
    }

    // optional .MsgProto.WorldPos m_pos_to = 2;
    if (has_m_pos_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_pos_to());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldView::MergeFrom(const WorldView& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_pos_from()) {
      mutable_m_pos_from()->::MsgProto::WorldPos::MergeFrom(from.m_pos_from());
    }
    if (from.has_m_pos_to()) {
      mutable_m_pos_to()->::MsgProto::WorldPos::MergeFrom(from.m_pos_to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldView::CopyFrom(const WorldView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldView::IsInitialized() const {

  return true;
}

void WorldView::Swap(WorldView* other) {
  if (other != this) {
    std::swap(m_pos_from_, other->m_pos_from_);
    std::swap(m_pos_to_, other->m_pos_to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldView_descriptor_;
  metadata.reflection = WorldView_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldNodeHandler::kMEtypeFieldNumber;
const int WorldNodeHandler::kMIdFieldNumber;
const int WorldNodeHandler::kMTableidFieldNumber;
const int WorldNodeHandler::kMRoleidFieldNumber;
const int WorldNodeHandler::kMViewFieldNumber;
const int WorldNodeHandler::kMHpFieldNumber;
const int WorldNodeHandler::kMArmyIdsFieldNumber;
#endif  // !_MSC_VER

WorldNodeHandler::WorldNodeHandler()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.WorldNodeHandler)
}

void WorldNodeHandler::InitAsDefaultInstance() {
  m_view_ = const_cast< ::MsgProto::WorldView*>(&::MsgProto::WorldView::default_instance());
}

WorldNodeHandler::WorldNodeHandler(const WorldNodeHandler& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.WorldNodeHandler)
}

void WorldNodeHandler::SharedCtor() {
  _cached_size_ = 0;
  m_etype_ = 1;
  m_id_ = 0u;
  m_tableid_ = 0u;
  m_roleid_ = 0u;
  m_view_ = NULL;
  m_hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldNodeHandler::~WorldNodeHandler() {
  // @@protoc_insertion_point(destructor:MsgProto.WorldNodeHandler)
  SharedDtor();
}

void WorldNodeHandler::SharedDtor() {
  if (this != default_instance_) {
    delete m_view_;
  }
}

void WorldNodeHandler::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldNodeHandler::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldNodeHandler_descriptor_;
}

const WorldNodeHandler& WorldNodeHandler::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

WorldNodeHandler* WorldNodeHandler::default_instance_ = NULL;

WorldNodeHandler* WorldNodeHandler::New() const {
  return new WorldNodeHandler;
}

void WorldNodeHandler::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorldNodeHandler*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(m_id_, m_roleid_);
    m_etype_ = 1;
    if (has_m_view()) {
      if (m_view_ != NULL) m_view_->::MsgProto::WorldView::Clear();
    }
    m_hp_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  m_army_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldNodeHandler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.WorldNodeHandler)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgProto.EObjectType m_etype = 1 [default = E_army];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgProto::EObjectType_IsValid(value)) {
            set_m_etype(static_cast< ::MsgProto::EObjectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional uint32 m_id = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_tableid;
        break;
      }

      // optional uint32 m_tableid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_m_tableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_tableid_)));
          set_has_m_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_roleid;
        break;
      }

      // optional uint32 m_roleid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_m_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_m_view;
        break;
      }

      // optional .MsgProto.WorldView m_view = 5;
      case 5: {
        if (tag == 42) {
         parse_m_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_view()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_m_hp;
        break;
      }

      // optional uint32 m_hp = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_m_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_hp_)));
          set_has_m_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_m_army_ids;
        break;
      }

      // repeated uint32 m_army_ids = 7;
      case 7: {
        if (tag == 56) {
         parse_m_army_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_m_army_ids())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_m_army_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_m_army_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.WorldNodeHandler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.WorldNodeHandler)
  return false;
#undef DO_
}

void WorldNodeHandler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.WorldNodeHandler)
  // optional .MsgProto.EObjectType m_etype = 1 [default = E_army];
  if (has_m_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->m_etype(), output);
  }

  // optional uint32 m_id = 2 [default = 0];
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_id(), output);
  }

  // optional uint32 m_tableid = 3 [default = 0];
  if (has_m_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m_tableid(), output);
  }

  // optional uint32 m_roleid = 4 [default = 0];
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->m_roleid(), output);
  }

  // optional .MsgProto.WorldView m_view = 5;
  if (has_m_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_view(), output);
  }

  // optional uint32 m_hp = 6 [default = 0];
  if (has_m_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->m_hp(), output);
  }

  // repeated uint32 m_army_ids = 7;
  for (int i = 0; i < this->m_army_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->m_army_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.WorldNodeHandler)
}

::google::protobuf::uint8* WorldNodeHandler::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.WorldNodeHandler)
  // optional .MsgProto.EObjectType m_etype = 1 [default = E_army];
  if (has_m_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->m_etype(), target);
  }

  // optional uint32 m_id = 2 [default = 0];
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_id(), target);
  }

  // optional uint32 m_tableid = 3 [default = 0];
  if (has_m_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m_tableid(), target);
  }

  // optional uint32 m_roleid = 4 [default = 0];
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->m_roleid(), target);
  }

  // optional .MsgProto.WorldView m_view = 5;
  if (has_m_view()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_view(), target);
  }

  // optional uint32 m_hp = 6 [default = 0];
  if (has_m_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->m_hp(), target);
  }

  // repeated uint32 m_army_ids = 7;
  for (int i = 0; i < this->m_army_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->m_army_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.WorldNodeHandler)
  return target;
}

int WorldNodeHandler::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgProto.EObjectType m_etype = 1 [default = E_army];
    if (has_m_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m_etype());
    }

    // optional uint32 m_id = 2 [default = 0];
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_id());
    }

    // optional uint32 m_tableid = 3 [default = 0];
    if (has_m_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_tableid());
    }

    // optional uint32 m_roleid = 4 [default = 0];
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_roleid());
    }

    // optional .MsgProto.WorldView m_view = 5;
    if (has_m_view()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_view());
    }

    // optional uint32 m_hp = 6 [default = 0];
    if (has_m_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_hp());
    }

  }
  // repeated uint32 m_army_ids = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_army_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->m_army_ids(i));
    }
    total_size += 1 * this->m_army_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldNodeHandler::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldNodeHandler* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldNodeHandler*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldNodeHandler::MergeFrom(const WorldNodeHandler& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_army_ids_.MergeFrom(from.m_army_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_etype()) {
      set_m_etype(from.m_etype());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_tableid()) {
      set_m_tableid(from.m_tableid());
    }
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_view()) {
      mutable_m_view()->::MsgProto::WorldView::MergeFrom(from.m_view());
    }
    if (from.has_m_hp()) {
      set_m_hp(from.m_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldNodeHandler::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldNodeHandler::CopyFrom(const WorldNodeHandler& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldNodeHandler::IsInitialized() const {

  return true;
}

void WorldNodeHandler::Swap(WorldNodeHandler* other) {
  if (other != this) {
    std::swap(m_etype_, other->m_etype_);
    std::swap(m_id_, other->m_id_);
    std::swap(m_tableid_, other->m_tableid_);
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_view_, other->m_view_);
    std::swap(m_hp_, other->m_hp_);
    m_army_ids_.Swap(&other->m_army_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldNodeHandler::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldNodeHandler_descriptor_;
  metadata.reflection = WorldNodeHandler_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldNodeVector::kMNodesFieldNumber;
#endif  // !_MSC_VER

WorldNodeVector::WorldNodeVector()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.WorldNodeVector)
}

void WorldNodeVector::InitAsDefaultInstance() {
}

WorldNodeVector::WorldNodeVector(const WorldNodeVector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.WorldNodeVector)
}

void WorldNodeVector::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldNodeVector::~WorldNodeVector() {
  // @@protoc_insertion_point(destructor:MsgProto.WorldNodeVector)
  SharedDtor();
}

void WorldNodeVector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldNodeVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldNodeVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldNodeVector_descriptor_;
}

const WorldNodeVector& WorldNodeVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

WorldNodeVector* WorldNodeVector::default_instance_ = NULL;

WorldNodeVector* WorldNodeVector::New() const {
  return new WorldNodeVector;
}

void WorldNodeVector::Clear() {
  m_nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldNodeVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.WorldNodeVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgProto.WorldNodeHandler m_nodes = 9;
      case 9: {
        if (tag == 74) {
         parse_m_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_m_nodes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.WorldNodeVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.WorldNodeVector)
  return false;
#undef DO_
}

void WorldNodeVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.WorldNodeVector)
  // repeated .MsgProto.WorldNodeHandler m_nodes = 9;
  for (int i = 0; i < this->m_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.WorldNodeVector)
}

::google::protobuf::uint8* WorldNodeVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.WorldNodeVector)
  // repeated .MsgProto.WorldNodeHandler m_nodes = 9;
  for (int i = 0; i < this->m_nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.WorldNodeVector)
  return target;
}

int WorldNodeVector::ByteSize() const {
  int total_size = 0;

  // repeated .MsgProto.WorldNodeHandler m_nodes = 9;
  total_size += 1 * this->m_nodes_size();
  for (int i = 0; i < this->m_nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldNodeVector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldNodeVector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldNodeVector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldNodeVector::MergeFrom(const WorldNodeVector& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_nodes_.MergeFrom(from.m_nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldNodeVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldNodeVector::CopyFrom(const WorldNodeVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldNodeVector::IsInitialized() const {

  return true;
}

void WorldNodeVector::Swap(WorldNodeVector* other) {
  if (other != this) {
    m_nodes_.Swap(&other->m_nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldNodeVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldNodeVector_descriptor_;
  metadata.reflection = WorldNodeVector_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* WorldArmy_EState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldArmy_EState_descriptor_;
}
bool WorldArmy_EState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WorldArmy_EState WorldArmy::E_MoveTo;
const WorldArmy_EState WorldArmy::E_BackCity;
const WorldArmy_EState WorldArmy::E_GetMine;
const WorldArmy_EState WorldArmy::E_Fight;
const WorldArmy_EState WorldArmy::E_Hold;
const WorldArmy_EState WorldArmy::E_HoldNpc;
const WorldArmy_EState WorldArmy::E_ArriveHome;
const WorldArmy_EState WorldArmy::E_HoldTower;
const WorldArmy_EState WorldArmy::EState_MIN;
const WorldArmy_EState WorldArmy::EState_MAX;
const int WorldArmy::EState_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* WorldArmy_MoveType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldArmy_MoveType_descriptor_;
}
bool WorldArmy_MoveType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WorldArmy_MoveType WorldArmy::mt_fight;
const WorldArmy_MoveType WorldArmy::mt_get;
const WorldArmy_MoveType WorldArmy::mt_touch;
const WorldArmy_MoveType WorldArmy::MoveType_MIN;
const WorldArmy_MoveType WorldArmy::MoveType_MAX;
const int WorldArmy::MoveType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int WorldArmy::kMUArmyIDFieldNumber;
const int WorldArmy::kMURoleIDFieldNumber;
const int WorldArmy::kMUCityIDFieldNumber;
const int WorldArmy::kMEStateFieldNumber;
const int WorldArmy::kMViewFromFieldNumber;
const int WorldArmy::kMViewToFieldNumber;
const int WorldArmy::kMUMoveSpeedFieldNumber;
const int WorldArmy::kMTimeFieldNumber;
const int WorldArmy::kMResFieldNumber;
const int WorldArmy::kMOwnerFieldNumber;
const int WorldArmy::kMMtFieldNumber;
const int WorldArmy::kMFightResFieldNumber;
#endif  // !_MSC_VER

WorldArmy::WorldArmy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.WorldArmy)
}

void WorldArmy::InitAsDefaultInstance() {
  m_view_from_ = const_cast< ::MsgProto::WorldView*>(&::MsgProto::WorldView::default_instance());
  m_view_to_ = const_cast< ::MsgProto::WorldView*>(&::MsgProto::WorldView::default_instance());
  m_time_ = const_cast< ::MsgProto::TimeInfo*>(&::MsgProto::TimeInfo::default_instance());
}

WorldArmy::WorldArmy(const WorldArmy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.WorldArmy)
}

void WorldArmy::SharedCtor() {
  _cached_size_ = 0;
  m_uarmyid_ = 0u;
  m_uroleid_ = 0u;
  m_ucityid_ = 0u;
  m_estate_ = 0;
  m_view_from_ = NULL;
  m_view_to_ = NULL;
  m_umovespeed_ = 0u;
  m_time_ = NULL;
  m_owner_ = 0;
  m_mt_ = 0;
  m_fight_res_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldArmy::~WorldArmy() {
  // @@protoc_insertion_point(destructor:MsgProto.WorldArmy)
  SharedDtor();
}

void WorldArmy::SharedDtor() {
  if (this != default_instance_) {
    delete m_view_from_;
    delete m_view_to_;
    delete m_time_;
  }
}

void WorldArmy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldArmy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldArmy_descriptor_;
}

const WorldArmy& WorldArmy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

WorldArmy* WorldArmy::default_instance_ = NULL;

WorldArmy* WorldArmy::New() const {
  return new WorldArmy;
}

void WorldArmy::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorldArmy*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(m_uarmyid_, m_estate_);
    if (has_m_view_from()) {
      if (m_view_from_ != NULL) m_view_from_->::MsgProto::WorldView::Clear();
    }
    if (has_m_view_to()) {
      if (m_view_to_ != NULL) m_view_to_->::MsgProto::WorldView::Clear();
    }
    m_umovespeed_ = 0u;
    if (has_m_time()) {
      if (m_time_ != NULL) m_time_->::MsgProto::TimeInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3584) {
    ZR_(m_mt_, m_fight_res_);
    m_owner_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  m_res_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldArmy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.WorldArmy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 m_uArmyID = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_uarmyid_)));
          set_has_m_uarmyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_uRoleID;
        break;
      }

      // optional uint32 m_uRoleID = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_uRoleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_uroleid_)));
          set_has_m_uroleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_uCityID;
        break;
      }

      // optional uint32 m_uCityID = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_m_uCityID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_ucityid_)));
          set_has_m_ucityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_eState;
        break;
      }

      // optional .MsgProto.WorldArmy.EState m_eState = 4 [default = E_MoveTo];
      case 4: {
        if (tag == 32) {
         parse_m_eState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgProto::WorldArmy_EState_IsValid(value)) {
            set_m_estate(static_cast< ::MsgProto::WorldArmy_EState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_m_view_from;
        break;
      }

      // optional .MsgProto.WorldView m_view_from = 5;
      case 5: {
        if (tag == 42) {
         parse_m_view_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_view_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_m_view_to;
        break;
      }

      // optional .MsgProto.WorldView m_view_to = 6;
      case 6: {
        if (tag == 50) {
         parse_m_view_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_view_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_m_uMoveSpeed;
        break;
      }

      // optional uint32 m_uMoveSpeed = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_m_uMoveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_umovespeed_)));
          set_has_m_umovespeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_m_time;
        break;
      }

      // optional .MsgProto.TimeInfo m_time = 8;
      case 8: {
        if (tag == 66) {
         parse_m_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_m_res;
        break;
      }

      // repeated .MsgProto.SKeyValuePair m_res = 9;
      case 9: {
        if (tag == 74) {
         parse_m_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_m_res;
        if (input->ExpectTag(80)) goto parse_m_owner;
        break;
      }

      // optional .MsgProto.EResOwner m_owner = 10 [default = E_None];
      case 10: {
        if (tag == 80) {
         parse_m_owner:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgProto::EResOwner_IsValid(value)) {
            set_m_owner(static_cast< ::MsgProto::EResOwner >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_m_mt;
        break;
      }

      // optional .MsgProto.WorldArmy.MoveType m_mt = 11 [default = mt_fight];
      case 11: {
        if (tag == 88) {
         parse_m_mt:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgProto::WorldArmy_MoveType_IsValid(value)) {
            set_m_mt(static_cast< ::MsgProto::WorldArmy_MoveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_m_fight_res;
        break;
      }

      // optional uint32 m_fight_res = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_m_fight_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_fight_res_)));
          set_has_m_fight_res();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.WorldArmy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.WorldArmy)
  return false;
#undef DO_
}

void WorldArmy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.WorldArmy)
  // optional uint32 m_uArmyID = 1 [default = 0];
  if (has_m_uarmyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_uarmyid(), output);
  }

  // optional uint32 m_uRoleID = 2 [default = 0];
  if (has_m_uroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_uroleid(), output);
  }

  // optional uint32 m_uCityID = 3 [default = 0];
  if (has_m_ucityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m_ucityid(), output);
  }

  // optional .MsgProto.WorldArmy.EState m_eState = 4 [default = E_MoveTo];
  if (has_m_estate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->m_estate(), output);
  }

  // optional .MsgProto.WorldView m_view_from = 5;
  if (has_m_view_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_view_from(), output);
  }

  // optional .MsgProto.WorldView m_view_to = 6;
  if (has_m_view_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_view_to(), output);
  }

  // optional uint32 m_uMoveSpeed = 7 [default = 0];
  if (has_m_umovespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->m_umovespeed(), output);
  }

  // optional .MsgProto.TimeInfo m_time = 8;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_time(), output);
  }

  // repeated .MsgProto.SKeyValuePair m_res = 9;
  for (int i = 0; i < this->m_res_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_res(i), output);
  }

  // optional .MsgProto.EResOwner m_owner = 10 [default = E_None];
  if (has_m_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->m_owner(), output);
  }

  // optional .MsgProto.WorldArmy.MoveType m_mt = 11 [default = mt_fight];
  if (has_m_mt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->m_mt(), output);
  }

  // optional uint32 m_fight_res = 12 [default = 0];
  if (has_m_fight_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->m_fight_res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.WorldArmy)
}

::google::protobuf::uint8* WorldArmy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.WorldArmy)
  // optional uint32 m_uArmyID = 1 [default = 0];
  if (has_m_uarmyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_uarmyid(), target);
  }

  // optional uint32 m_uRoleID = 2 [default = 0];
  if (has_m_uroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_uroleid(), target);
  }

  // optional uint32 m_uCityID = 3 [default = 0];
  if (has_m_ucityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m_ucityid(), target);
  }

  // optional .MsgProto.WorldArmy.EState m_eState = 4 [default = E_MoveTo];
  if (has_m_estate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->m_estate(), target);
  }

  // optional .MsgProto.WorldView m_view_from = 5;
  if (has_m_view_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_view_from(), target);
  }

  // optional .MsgProto.WorldView m_view_to = 6;
  if (has_m_view_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_view_to(), target);
  }

  // optional uint32 m_uMoveSpeed = 7 [default = 0];
  if (has_m_umovespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->m_umovespeed(), target);
  }

  // optional .MsgProto.TimeInfo m_time = 8;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_time(), target);
  }

  // repeated .MsgProto.SKeyValuePair m_res = 9;
  for (int i = 0; i < this->m_res_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_res(i), target);
  }

  // optional .MsgProto.EResOwner m_owner = 10 [default = E_None];
  if (has_m_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->m_owner(), target);
  }

  // optional .MsgProto.WorldArmy.MoveType m_mt = 11 [default = mt_fight];
  if (has_m_mt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->m_mt(), target);
  }

  // optional uint32 m_fight_res = 12 [default = 0];
  if (has_m_fight_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->m_fight_res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.WorldArmy)
  return target;
}

int WorldArmy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 m_uArmyID = 1 [default = 0];
    if (has_m_uarmyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_uarmyid());
    }

    // optional uint32 m_uRoleID = 2 [default = 0];
    if (has_m_uroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_uroleid());
    }

    // optional uint32 m_uCityID = 3 [default = 0];
    if (has_m_ucityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_ucityid());
    }

    // optional .MsgProto.WorldArmy.EState m_eState = 4 [default = E_MoveTo];
    if (has_m_estate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m_estate());
    }

    // optional .MsgProto.WorldView m_view_from = 5;
    if (has_m_view_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_view_from());
    }

    // optional .MsgProto.WorldView m_view_to = 6;
    if (has_m_view_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_view_to());
    }

    // optional uint32 m_uMoveSpeed = 7 [default = 0];
    if (has_m_umovespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_umovespeed());
    }

    // optional .MsgProto.TimeInfo m_time = 8;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_time());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .MsgProto.EResOwner m_owner = 10 [default = E_None];
    if (has_m_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m_owner());
    }

    // optional .MsgProto.WorldArmy.MoveType m_mt = 11 [default = mt_fight];
    if (has_m_mt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m_mt());
    }

    // optional uint32 m_fight_res = 12 [default = 0];
    if (has_m_fight_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_fight_res());
    }

  }
  // repeated .MsgProto.SKeyValuePair m_res = 9;
  total_size += 1 * this->m_res_size();
  for (int i = 0; i < this->m_res_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_res(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldArmy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldArmy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldArmy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldArmy::MergeFrom(const WorldArmy& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_res_.MergeFrom(from.m_res_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_uarmyid()) {
      set_m_uarmyid(from.m_uarmyid());
    }
    if (from.has_m_uroleid()) {
      set_m_uroleid(from.m_uroleid());
    }
    if (from.has_m_ucityid()) {
      set_m_ucityid(from.m_ucityid());
    }
    if (from.has_m_estate()) {
      set_m_estate(from.m_estate());
    }
    if (from.has_m_view_from()) {
      mutable_m_view_from()->::MsgProto::WorldView::MergeFrom(from.m_view_from());
    }
    if (from.has_m_view_to()) {
      mutable_m_view_to()->::MsgProto::WorldView::MergeFrom(from.m_view_to());
    }
    if (from.has_m_umovespeed()) {
      set_m_umovespeed(from.m_umovespeed());
    }
    if (from.has_m_time()) {
      mutable_m_time()->::MsgProto::TimeInfo::MergeFrom(from.m_time());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_m_owner()) {
      set_m_owner(from.m_owner());
    }
    if (from.has_m_mt()) {
      set_m_mt(from.m_mt());
    }
    if (from.has_m_fight_res()) {
      set_m_fight_res(from.m_fight_res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldArmy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldArmy::CopyFrom(const WorldArmy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldArmy::IsInitialized() const {

  return true;
}

void WorldArmy::Swap(WorldArmy* other) {
  if (other != this) {
    std::swap(m_uarmyid_, other->m_uarmyid_);
    std::swap(m_uroleid_, other->m_uroleid_);
    std::swap(m_ucityid_, other->m_ucityid_);
    std::swap(m_estate_, other->m_estate_);
    std::swap(m_view_from_, other->m_view_from_);
    std::swap(m_view_to_, other->m_view_to_);
    std::swap(m_umovespeed_, other->m_umovespeed_);
    std::swap(m_time_, other->m_time_);
    m_res_.Swap(&other->m_res_);
    std::swap(m_owner_, other->m_owner_);
    std::swap(m_mt_, other->m_mt_);
    std::swap(m_fight_res_, other->m_fight_res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldArmy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldArmy_descriptor_;
  metadata.reflection = WorldArmy_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* WorldMine_EState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldMine_EState_descriptor_;
}
bool WorldMine_EState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WorldMine_EState WorldMine::E_Free;
const WorldMine_EState WorldMine::E_Holde;
const WorldMine_EState WorldMine::EState_MIN;
const WorldMine_EState WorldMine::EState_MAX;
const int WorldMine::EState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int WorldMine::kMEtypeFieldNumber;
const int WorldMine::kMPosFieldNumber;
const int WorldMine::kMUMineIDFieldNumber;
const int WorldMine::kMUTableIDFieldNumber;
const int WorldMine::kMHpFieldNumber;
const int WorldMine::kMOwnerFieldNumber;
#endif  // !_MSC_VER

WorldMine::WorldMine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.WorldMine)
}

void WorldMine::InitAsDefaultInstance() {
  m_pos_ = const_cast< ::MsgProto::WorldView*>(&::MsgProto::WorldView::default_instance());
}

WorldMine::WorldMine(const WorldMine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.WorldMine)
}

void WorldMine::SharedCtor() {
  _cached_size_ = 0;
  m_etype_ = 0;
  m_pos_ = NULL;
  m_umineid_ = 0u;
  m_utableid_ = 0u;
  m_hp_ = 0u;
  m_owner_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldMine::~WorldMine() {
  // @@protoc_insertion_point(destructor:MsgProto.WorldMine)
  SharedDtor();
}

void WorldMine::SharedDtor() {
  if (this != default_instance_) {
    delete m_pos_;
  }
}

void WorldMine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldMine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldMine_descriptor_;
}

const WorldMine& WorldMine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

WorldMine* WorldMine::default_instance_ = NULL;

WorldMine* WorldMine::New() const {
  return new WorldMine;
}

void WorldMine::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorldMine*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(m_etype_, m_owner_);
    if (has_m_pos()) {
      if (m_pos_ != NULL) m_pos_->::MsgProto::WorldView::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldMine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.WorldMine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgProto.WorldMine.EState m_etype = 1 [default = E_Free];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgProto::WorldMine_EState_IsValid(value)) {
            set_m_etype(static_cast< ::MsgProto::WorldMine_EState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_m_pos;
        break;
      }

      // optional .MsgProto.WorldView m_pos = 2;
      case 2: {
        if (tag == 18) {
         parse_m_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_uMineID;
        break;
      }

      // optional uint32 m_uMineID = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_m_uMineID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_umineid_)));
          set_has_m_umineid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_uTableID;
        break;
      }

      // optional uint32 m_uTableID = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_m_uTableID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_utableid_)));
          set_has_m_utableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_m_hp;
        break;
      }

      // optional uint32 m_hp = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_m_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_hp_)));
          set_has_m_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_m_owner;
        break;
      }

      // optional .MsgProto.EResOwner m_owner = 6 [default = E_None];
      case 6: {
        if (tag == 48) {
         parse_m_owner:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgProto::EResOwner_IsValid(value)) {
            set_m_owner(static_cast< ::MsgProto::EResOwner >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.WorldMine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.WorldMine)
  return false;
#undef DO_
}

void WorldMine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.WorldMine)
  // optional .MsgProto.WorldMine.EState m_etype = 1 [default = E_Free];
  if (has_m_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->m_etype(), output);
  }

  // optional .MsgProto.WorldView m_pos = 2;
  if (has_m_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_pos(), output);
  }

  // optional uint32 m_uMineID = 3 [default = 0];
  if (has_m_umineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m_umineid(), output);
  }

  // optional uint32 m_uTableID = 4 [default = 0];
  if (has_m_utableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->m_utableid(), output);
  }

  // optional uint32 m_hp = 5 [default = 0];
  if (has_m_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->m_hp(), output);
  }

  // optional .MsgProto.EResOwner m_owner = 6 [default = E_None];
  if (has_m_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->m_owner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.WorldMine)
}

::google::protobuf::uint8* WorldMine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.WorldMine)
  // optional .MsgProto.WorldMine.EState m_etype = 1 [default = E_Free];
  if (has_m_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->m_etype(), target);
  }

  // optional .MsgProto.WorldView m_pos = 2;
  if (has_m_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_pos(), target);
  }

  // optional uint32 m_uMineID = 3 [default = 0];
  if (has_m_umineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m_umineid(), target);
  }

  // optional uint32 m_uTableID = 4 [default = 0];
  if (has_m_utableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->m_utableid(), target);
  }

  // optional uint32 m_hp = 5 [default = 0];
  if (has_m_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->m_hp(), target);
  }

  // optional .MsgProto.EResOwner m_owner = 6 [default = E_None];
  if (has_m_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->m_owner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.WorldMine)
  return target;
}

int WorldMine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgProto.WorldMine.EState m_etype = 1 [default = E_Free];
    if (has_m_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m_etype());
    }

    // optional .MsgProto.WorldView m_pos = 2;
    if (has_m_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_pos());
    }

    // optional uint32 m_uMineID = 3 [default = 0];
    if (has_m_umineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_umineid());
    }

    // optional uint32 m_uTableID = 4 [default = 0];
    if (has_m_utableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_utableid());
    }

    // optional uint32 m_hp = 5 [default = 0];
    if (has_m_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_hp());
    }

    // optional .MsgProto.EResOwner m_owner = 6 [default = E_None];
    if (has_m_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m_owner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldMine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldMine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldMine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldMine::MergeFrom(const WorldMine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_etype()) {
      set_m_etype(from.m_etype());
    }
    if (from.has_m_pos()) {
      mutable_m_pos()->::MsgProto::WorldView::MergeFrom(from.m_pos());
    }
    if (from.has_m_umineid()) {
      set_m_umineid(from.m_umineid());
    }
    if (from.has_m_utableid()) {
      set_m_utableid(from.m_utableid());
    }
    if (from.has_m_hp()) {
      set_m_hp(from.m_hp());
    }
    if (from.has_m_owner()) {
      set_m_owner(from.m_owner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldMine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldMine::CopyFrom(const WorldMine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldMine::IsInitialized() const {

  return true;
}

void WorldMine::Swap(WorldMine* other) {
  if (other != this) {
    std::swap(m_etype_, other->m_etype_);
    std::swap(m_pos_, other->m_pos_);
    std::swap(m_umineid_, other->m_umineid_);
    std::swap(m_utableid_, other->m_utableid_);
    std::swap(m_hp_, other->m_hp_);
    std::swap(m_owner_, other->m_owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldMine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldMine_descriptor_;
  metadata.reflection = WorldMine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldNpc::kMPosFieldNumber;
const int WorldNpc::kMUNpcIDFieldNumber;
const int WorldNpc::kMUTableIDFieldNumber;
const int WorldNpc::kMOwnerFieldNumber;
#endif  // !_MSC_VER

WorldNpc::WorldNpc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.WorldNpc)
}

void WorldNpc::InitAsDefaultInstance() {
  m_pos_ = const_cast< ::MsgProto::WorldView*>(&::MsgProto::WorldView::default_instance());
}

WorldNpc::WorldNpc(const WorldNpc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.WorldNpc)
}

void WorldNpc::SharedCtor() {
  _cached_size_ = 0;
  m_pos_ = NULL;
  m_unpcid_ = 0u;
  m_utableid_ = 0u;
  m_owner_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldNpc::~WorldNpc() {
  // @@protoc_insertion_point(destructor:MsgProto.WorldNpc)
  SharedDtor();
}

void WorldNpc::SharedDtor() {
  if (this != default_instance_) {
    delete m_pos_;
  }
}

void WorldNpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldNpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldNpc_descriptor_;
}

const WorldNpc& WorldNpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

WorldNpc* WorldNpc::default_instance_ = NULL;

WorldNpc* WorldNpc::New() const {
  return new WorldNpc;
}

void WorldNpc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorldNpc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(m_unpcid_, m_owner_);
    if (has_m_pos()) {
      if (m_pos_ != NULL) m_pos_->::MsgProto::WorldView::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.WorldNpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgProto.WorldView m_pos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_uNpcID;
        break;
      }

      // optional uint32 m_uNpcID = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_uNpcID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_unpcid_)));
          set_has_m_unpcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_uTableID;
        break;
      }

      // optional uint32 m_uTableID = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_m_uTableID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_utableid_)));
          set_has_m_utableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_owner;
        break;
      }

      // optional .MsgProto.EResOwner m_owner = 4 [default = E_None];
      case 4: {
        if (tag == 32) {
         parse_m_owner:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgProto::EResOwner_IsValid(value)) {
            set_m_owner(static_cast< ::MsgProto::EResOwner >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.WorldNpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.WorldNpc)
  return false;
#undef DO_
}

void WorldNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.WorldNpc)
  // optional .MsgProto.WorldView m_pos = 1;
  if (has_m_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_pos(), output);
  }

  // optional uint32 m_uNpcID = 2 [default = 0];
  if (has_m_unpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_unpcid(), output);
  }

  // optional uint32 m_uTableID = 3 [default = 0];
  if (has_m_utableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m_utableid(), output);
  }

  // optional .MsgProto.EResOwner m_owner = 4 [default = E_None];
  if (has_m_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->m_owner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.WorldNpc)
}

::google::protobuf::uint8* WorldNpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.WorldNpc)
  // optional .MsgProto.WorldView m_pos = 1;
  if (has_m_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_pos(), target);
  }

  // optional uint32 m_uNpcID = 2 [default = 0];
  if (has_m_unpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_unpcid(), target);
  }

  // optional uint32 m_uTableID = 3 [default = 0];
  if (has_m_utableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m_utableid(), target);
  }

  // optional .MsgProto.EResOwner m_owner = 4 [default = E_None];
  if (has_m_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->m_owner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.WorldNpc)
  return target;
}

int WorldNpc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgProto.WorldView m_pos = 1;
    if (has_m_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_pos());
    }

    // optional uint32 m_uNpcID = 2 [default = 0];
    if (has_m_unpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_unpcid());
    }

    // optional uint32 m_uTableID = 3 [default = 0];
    if (has_m_utableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_utableid());
    }

    // optional .MsgProto.EResOwner m_owner = 4 [default = E_None];
    if (has_m_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m_owner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldNpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldNpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldNpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldNpc::MergeFrom(const WorldNpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_pos()) {
      mutable_m_pos()->::MsgProto::WorldView::MergeFrom(from.m_pos());
    }
    if (from.has_m_unpcid()) {
      set_m_unpcid(from.m_unpcid());
    }
    if (from.has_m_utableid()) {
      set_m_utableid(from.m_utableid());
    }
    if (from.has_m_owner()) {
      set_m_owner(from.m_owner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldNpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldNpc::CopyFrom(const WorldNpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldNpc::IsInitialized() const {

  return true;
}

void WorldNpc::Swap(WorldNpc* other) {
  if (other != this) {
    std::swap(m_pos_, other->m_pos_);
    std::swap(m_unpcid_, other->m_unpcid_);
    std::swap(m_utableid_, other->m_utableid_);
    std::swap(m_owner_, other->m_owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldNpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldNpc_descriptor_;
  metadata.reflection = WorldNpc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldCity::kMPosFieldNumber;
const int WorldCity::kMUCityIDFieldNumber;
const int WorldCity::kMUTableIDFieldNumber;
const int WorldCity::kMURoleIDFieldNumber;
const int WorldCity::kMStrNameFieldNumber;
const int WorldCity::kMSLevelFieldNumber;
const int WorldCity::kMOwnerFieldNumber;
#endif  // !_MSC_VER

WorldCity::WorldCity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.WorldCity)
}

void WorldCity::InitAsDefaultInstance() {
  m_pos_ = const_cast< ::MsgProto::WorldView*>(&::MsgProto::WorldView::default_instance());
}

WorldCity::WorldCity(const WorldCity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.WorldCity)
}

void WorldCity::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  m_pos_ = NULL;
  m_ucityid_ = 0u;
  m_utableid_ = 0u;
  m_uroleid_ = 0u;
  m_strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m_slevel_ = 0u;
  m_owner_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldCity::~WorldCity() {
  // @@protoc_insertion_point(destructor:MsgProto.WorldCity)
  SharedDtor();
}

void WorldCity::SharedDtor() {
  if (m_strname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete m_strname_;
  }
  if (this != default_instance_) {
    delete m_pos_;
  }
}

void WorldCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldCity_descriptor_;
}

const WorldCity& WorldCity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

WorldCity* WorldCity::default_instance_ = NULL;

WorldCity* WorldCity::New() const {
  return new WorldCity;
}

void WorldCity::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorldCity*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(m_ucityid_, m_utableid_);
    ZR_(m_uroleid_, m_owner_);
    if (has_m_pos()) {
      if (m_pos_ != NULL) m_pos_->::MsgProto::WorldView::Clear();
    }
    if (has_m_strname()) {
      if (m_strname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        m_strname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.WorldCity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgProto.WorldView m_pos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_uCityID;
        break;
      }

      // optional uint32 m_uCityID = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_uCityID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_ucityid_)));
          set_has_m_ucityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_uTableID;
        break;
      }

      // optional uint32 m_uTableID = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_m_uTableID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_utableid_)));
          set_has_m_utableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_uRoleID;
        break;
      }

      // optional uint32 m_uRoleID = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_m_uRoleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_uroleid_)));
          set_has_m_uroleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_m_strName;
        break;
      }

      // optional bytes m_strName = 5;
      case 5: {
        if (tag == 42) {
         parse_m_strName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_m_strname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_m_sLevel;
        break;
      }

      // optional uint32 m_sLevel = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_m_sLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_slevel_)));
          set_has_m_slevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_m_owner;
        break;
      }

      // optional .MsgProto.EResOwner m_owner = 7 [default = E_None];
      case 7: {
        if (tag == 56) {
         parse_m_owner:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgProto::EResOwner_IsValid(value)) {
            set_m_owner(static_cast< ::MsgProto::EResOwner >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.WorldCity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.WorldCity)
  return false;
#undef DO_
}

void WorldCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.WorldCity)
  // optional .MsgProto.WorldView m_pos = 1;
  if (has_m_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_pos(), output);
  }

  // optional uint32 m_uCityID = 2 [default = 0];
  if (has_m_ucityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_ucityid(), output);
  }

  // optional uint32 m_uTableID = 3 [default = 0];
  if (has_m_utableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m_utableid(), output);
  }

  // optional uint32 m_uRoleID = 4 [default = 0];
  if (has_m_uroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->m_uroleid(), output);
  }

  // optional bytes m_strName = 5;
  if (has_m_strname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->m_strname(), output);
  }

  // optional uint32 m_sLevel = 6 [default = 0];
  if (has_m_slevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->m_slevel(), output);
  }

  // optional .MsgProto.EResOwner m_owner = 7 [default = E_None];
  if (has_m_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->m_owner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.WorldCity)
}

::google::protobuf::uint8* WorldCity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.WorldCity)
  // optional .MsgProto.WorldView m_pos = 1;
  if (has_m_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_pos(), target);
  }

  // optional uint32 m_uCityID = 2 [default = 0];
  if (has_m_ucityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_ucityid(), target);
  }

  // optional uint32 m_uTableID = 3 [default = 0];
  if (has_m_utableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m_utableid(), target);
  }

  // optional uint32 m_uRoleID = 4 [default = 0];
  if (has_m_uroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->m_uroleid(), target);
  }

  // optional bytes m_strName = 5;
  if (has_m_strname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->m_strname(), target);
  }

  // optional uint32 m_sLevel = 6 [default = 0];
  if (has_m_slevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->m_slevel(), target);
  }

  // optional .MsgProto.EResOwner m_owner = 7 [default = E_None];
  if (has_m_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->m_owner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.WorldCity)
  return target;
}

int WorldCity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgProto.WorldView m_pos = 1;
    if (has_m_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_pos());
    }

    // optional uint32 m_uCityID = 2 [default = 0];
    if (has_m_ucityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_ucityid());
    }

    // optional uint32 m_uTableID = 3 [default = 0];
    if (has_m_utableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_utableid());
    }

    // optional uint32 m_uRoleID = 4 [default = 0];
    if (has_m_uroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_uroleid());
    }

    // optional bytes m_strName = 5;
    if (has_m_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->m_strname());
    }

    // optional uint32 m_sLevel = 6 [default = 0];
    if (has_m_slevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_slevel());
    }

    // optional .MsgProto.EResOwner m_owner = 7 [default = E_None];
    if (has_m_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m_owner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldCity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldCity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldCity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldCity::MergeFrom(const WorldCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_pos()) {
      mutable_m_pos()->::MsgProto::WorldView::MergeFrom(from.m_pos());
    }
    if (from.has_m_ucityid()) {
      set_m_ucityid(from.m_ucityid());
    }
    if (from.has_m_utableid()) {
      set_m_utableid(from.m_utableid());
    }
    if (from.has_m_uroleid()) {
      set_m_uroleid(from.m_uroleid());
    }
    if (from.has_m_strname()) {
      set_m_strname(from.m_strname());
    }
    if (from.has_m_slevel()) {
      set_m_slevel(from.m_slevel());
    }
    if (from.has_m_owner()) {
      set_m_owner(from.m_owner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldCity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldCity::CopyFrom(const WorldCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldCity::IsInitialized() const {

  return true;
}

void WorldCity::Swap(WorldCity* other) {
  if (other != this) {
    std::swap(m_pos_, other->m_pos_);
    std::swap(m_ucityid_, other->m_ucityid_);
    std::swap(m_utableid_, other->m_utableid_);
    std::swap(m_uroleid_, other->m_uroleid_);
    std::swap(m_strname_, other->m_strname_);
    std::swap(m_slevel_, other->m_slevel_);
    std::swap(m_owner_, other->m_owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldCity_descriptor_;
  metadata.reflection = WorldCity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldTower::kMPosFieldNumber;
const int WorldTower::kMGidFieldNumber;
const int WorldTower::kMTidFieldNumber;
const int WorldTower::kMArmyIdsFieldNumber;
const int WorldTower::kMOwnerFieldNumber;
#endif  // !_MSC_VER

WorldTower::WorldTower()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.WorldTower)
}

void WorldTower::InitAsDefaultInstance() {
  m_pos_ = const_cast< ::MsgProto::WorldView*>(&::MsgProto::WorldView::default_instance());
}

WorldTower::WorldTower(const WorldTower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.WorldTower)
}

void WorldTower::SharedCtor() {
  _cached_size_ = 0;
  m_pos_ = NULL;
  m_gid_ = 0u;
  m_tid_ = 0u;
  m_owner_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldTower::~WorldTower() {
  // @@protoc_insertion_point(destructor:MsgProto.WorldTower)
  SharedDtor();
}

void WorldTower::SharedDtor() {
  if (this != default_instance_) {
    delete m_pos_;
  }
}

void WorldTower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldTower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldTower_descriptor_;
}

const WorldTower& WorldTower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

WorldTower* WorldTower::default_instance_ = NULL;

WorldTower* WorldTower::New() const {
  return new WorldTower;
}

void WorldTower::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorldTower*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(m_gid_, m_tid_);
    if (has_m_pos()) {
      if (m_pos_ != NULL) m_pos_->::MsgProto::WorldView::Clear();
    }
    m_owner_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  m_army_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldTower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.WorldTower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgProto.WorldView m_pos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_gid;
        break;
      }

      // optional uint32 m_gid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_gid_)));
          set_has_m_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_tid;
        break;
      }

      // optional uint32 m_tid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_m_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_tid_)));
          set_has_m_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_army_ids;
        break;
      }

      // repeated uint32 m_army_ids = 4;
      case 4: {
        if (tag == 32) {
         parse_m_army_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_m_army_ids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_m_army_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_army_ids;
        if (input->ExpectTag(56)) goto parse_m_owner;
        break;
      }

      // optional .MsgProto.EResOwner m_owner = 7 [default = E_None];
      case 7: {
        if (tag == 56) {
         parse_m_owner:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgProto::EResOwner_IsValid(value)) {
            set_m_owner(static_cast< ::MsgProto::EResOwner >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.WorldTower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.WorldTower)
  return false;
#undef DO_
}

void WorldTower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.WorldTower)
  // optional .MsgProto.WorldView m_pos = 1;
  if (has_m_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_pos(), output);
  }

  // optional uint32 m_gid = 2 [default = 0];
  if (has_m_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_gid(), output);
  }

  // optional uint32 m_tid = 3 [default = 0];
  if (has_m_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m_tid(), output);
  }

  // repeated uint32 m_army_ids = 4;
  for (int i = 0; i < this->m_army_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->m_army_ids(i), output);
  }

  // optional .MsgProto.EResOwner m_owner = 7 [default = E_None];
  if (has_m_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->m_owner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.WorldTower)
}

::google::protobuf::uint8* WorldTower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.WorldTower)
  // optional .MsgProto.WorldView m_pos = 1;
  if (has_m_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_pos(), target);
  }

  // optional uint32 m_gid = 2 [default = 0];
  if (has_m_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_gid(), target);
  }

  // optional uint32 m_tid = 3 [default = 0];
  if (has_m_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m_tid(), target);
  }

  // repeated uint32 m_army_ids = 4;
  for (int i = 0; i < this->m_army_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->m_army_ids(i), target);
  }

  // optional .MsgProto.EResOwner m_owner = 7 [default = E_None];
  if (has_m_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->m_owner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.WorldTower)
  return target;
}

int WorldTower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgProto.WorldView m_pos = 1;
    if (has_m_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_pos());
    }

    // optional uint32 m_gid = 2 [default = 0];
    if (has_m_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_gid());
    }

    // optional uint32 m_tid = 3 [default = 0];
    if (has_m_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_tid());
    }

    // optional .MsgProto.EResOwner m_owner = 7 [default = E_None];
    if (has_m_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m_owner());
    }

  }
  // repeated uint32 m_army_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_army_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->m_army_ids(i));
    }
    total_size += 1 * this->m_army_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldTower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldTower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldTower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldTower::MergeFrom(const WorldTower& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_army_ids_.MergeFrom(from.m_army_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_pos()) {
      mutable_m_pos()->::MsgProto::WorldView::MergeFrom(from.m_pos());
    }
    if (from.has_m_gid()) {
      set_m_gid(from.m_gid());
    }
    if (from.has_m_tid()) {
      set_m_tid(from.m_tid());
    }
    if (from.has_m_owner()) {
      set_m_owner(from.m_owner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldTower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldTower::CopyFrom(const WorldTower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldTower::IsInitialized() const {

  return true;
}

void WorldTower::Swap(WorldTower* other) {
  if (other != this) {
    std::swap(m_pos_, other->m_pos_);
    std::swap(m_gid_, other->m_gid_);
    std::swap(m_tid_, other->m_tid_);
    m_army_ids_.Swap(&other->m_army_ids_);
    std::swap(m_owner_, other->m_owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldTower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldTower_descriptor_;
  metadata.reflection = WorldTower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBoss::kMPosFieldNumber;
const int WorldBoss::kMGidFieldNumber;
const int WorldBoss::kMTidFieldNumber;
const int WorldBoss::kMHpFieldNumber;
#endif  // !_MSC_VER

WorldBoss::WorldBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.WorldBoss)
}

void WorldBoss::InitAsDefaultInstance() {
  m_pos_ = const_cast< ::MsgProto::WorldView*>(&::MsgProto::WorldView::default_instance());
}

WorldBoss::WorldBoss(const WorldBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.WorldBoss)
}

void WorldBoss::SharedCtor() {
  _cached_size_ = 0;
  m_pos_ = NULL;
  m_gid_ = 0u;
  m_tid_ = 0u;
  m_hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBoss::~WorldBoss() {
  // @@protoc_insertion_point(destructor:MsgProto.WorldBoss)
  SharedDtor();
}

void WorldBoss::SharedDtor() {
  if (this != default_instance_) {
    delete m_pos_;
  }
}

void WorldBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBoss_descriptor_;
}

const WorldBoss& WorldBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

WorldBoss* WorldBoss::default_instance_ = NULL;

WorldBoss* WorldBoss::New() const {
  return new WorldBoss;
}

void WorldBoss::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorldBoss*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(m_gid_, m_hp_);
    if (has_m_pos()) {
      if (m_pos_ != NULL) m_pos_->::MsgProto::WorldView::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.WorldBoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgProto.WorldView m_pos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_gid;
        break;
      }

      // optional uint32 m_gid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_gid_)));
          set_has_m_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_tid;
        break;
      }

      // optional uint32 m_tid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_m_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_tid_)));
          set_has_m_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_hp;
        break;
      }

      // optional uint32 m_hp = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_m_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_hp_)));
          set_has_m_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.WorldBoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.WorldBoss)
  return false;
#undef DO_
}

void WorldBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.WorldBoss)
  // optional .MsgProto.WorldView m_pos = 1;
  if (has_m_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_pos(), output);
  }

  // optional uint32 m_gid = 2 [default = 0];
  if (has_m_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_gid(), output);
  }

  // optional uint32 m_tid = 3 [default = 0];
  if (has_m_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m_tid(), output);
  }

  // optional uint32 m_hp = 4 [default = 0];
  if (has_m_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->m_hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.WorldBoss)
}

::google::protobuf::uint8* WorldBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.WorldBoss)
  // optional .MsgProto.WorldView m_pos = 1;
  if (has_m_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_pos(), target);
  }

  // optional uint32 m_gid = 2 [default = 0];
  if (has_m_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_gid(), target);
  }

  // optional uint32 m_tid = 3 [default = 0];
  if (has_m_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m_tid(), target);
  }

  // optional uint32 m_hp = 4 [default = 0];
  if (has_m_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->m_hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.WorldBoss)
  return target;
}

int WorldBoss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgProto.WorldView m_pos = 1;
    if (has_m_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_pos());
    }

    // optional uint32 m_gid = 2 [default = 0];
    if (has_m_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_gid());
    }

    // optional uint32 m_tid = 3 [default = 0];
    if (has_m_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_tid());
    }

    // optional uint32 m_hp = 4 [default = 0];
    if (has_m_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBoss::MergeFrom(const WorldBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_pos()) {
      mutable_m_pos()->::MsgProto::WorldView::MergeFrom(from.m_pos());
    }
    if (from.has_m_gid()) {
      set_m_gid(from.m_gid());
    }
    if (from.has_m_tid()) {
      set_m_tid(from.m_tid());
    }
    if (from.has_m_hp()) {
      set_m_hp(from.m_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBoss::CopyFrom(const WorldBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBoss::IsInitialized() const {

  return true;
}

void WorldBoss::Swap(WorldBoss* other) {
  if (other != this) {
    std::swap(m_pos_, other->m_pos_);
    std::swap(m_gid_, other->m_gid_);
    std::swap(m_tid_, other->m_tid_);
    std::swap(m_hp_, other->m_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBoss_descriptor_;
  metadata.reflection = WorldBoss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleSoldier::kMUSoldierIDFieldNumber;
const int RoleSoldier::kMUSoldierNumFieldNumber;
#endif  // !_MSC_VER

RoleSoldier::RoleSoldier()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.RoleSoldier)
}

void RoleSoldier::InitAsDefaultInstance() {
}

RoleSoldier::RoleSoldier(const RoleSoldier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.RoleSoldier)
}

void RoleSoldier::SharedCtor() {
  _cached_size_ = 0;
  m_usoldierid_ = 0u;
  m_usoldiernum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleSoldier::~RoleSoldier() {
  // @@protoc_insertion_point(destructor:MsgProto.RoleSoldier)
  SharedDtor();
}

void RoleSoldier::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleSoldier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleSoldier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleSoldier_descriptor_;
}

const RoleSoldier& RoleSoldier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

RoleSoldier* RoleSoldier::default_instance_ = NULL;

RoleSoldier* RoleSoldier::New() const {
  return new RoleSoldier;
}

void RoleSoldier::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoleSoldier*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(m_usoldierid_, m_usoldiernum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleSoldier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.RoleSoldier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 m_uSoldierID = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_usoldierid_)));
          set_has_m_usoldierid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_uSoldierNum;
        break;
      }

      // optional uint32 m_uSoldierNum = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_uSoldierNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_usoldiernum_)));
          set_has_m_usoldiernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.RoleSoldier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.RoleSoldier)
  return false;
#undef DO_
}

void RoleSoldier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.RoleSoldier)
  // optional uint32 m_uSoldierID = 1 [default = 0];
  if (has_m_usoldierid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_usoldierid(), output);
  }

  // optional uint32 m_uSoldierNum = 2 [default = 0];
  if (has_m_usoldiernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_usoldiernum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.RoleSoldier)
}

::google::protobuf::uint8* RoleSoldier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.RoleSoldier)
  // optional uint32 m_uSoldierID = 1 [default = 0];
  if (has_m_usoldierid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_usoldierid(), target);
  }

  // optional uint32 m_uSoldierNum = 2 [default = 0];
  if (has_m_usoldiernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_usoldiernum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.RoleSoldier)
  return target;
}

int RoleSoldier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 m_uSoldierID = 1 [default = 0];
    if (has_m_usoldierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_usoldierid());
    }

    // optional uint32 m_uSoldierNum = 2 [default = 0];
    if (has_m_usoldiernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_usoldiernum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleSoldier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleSoldier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleSoldier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleSoldier::MergeFrom(const RoleSoldier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_usoldierid()) {
      set_m_usoldierid(from.m_usoldierid());
    }
    if (from.has_m_usoldiernum()) {
      set_m_usoldiernum(from.m_usoldiernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleSoldier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleSoldier::CopyFrom(const RoleSoldier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSoldier::IsInitialized() const {

  return true;
}

void RoleSoldier::Swap(RoleSoldier* other) {
  if (other != this) {
    std::swap(m_usoldierid_, other->m_usoldierid_);
    std::swap(m_usoldiernum_, other->m_usoldiernum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleSoldier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleSoldier_descriptor_;
  metadata.reflection = RoleSoldier_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleArmy::kMMoveFieldNumber;
const int RoleArmy::kMSoldierFieldNumber;
const int RoleArmy::kMLoadBaseFieldNumber;
const int RoleArmy::kMResIdFieldNumber;
const int RoleArmy::kMResNumFieldNumber;
const int RoleArmy::kMResSpeedFieldNumber;
const int RoleArmy::kMMoveLengthFieldNumber;
const int RoleArmy::kMBuildResidFieldNumber;
const int RoleArmy::kMInvestFieldNumber;
#endif  // !_MSC_VER

RoleArmy::RoleArmy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.RoleArmy)
}

void RoleArmy::InitAsDefaultInstance() {
  m_move_ = const_cast< ::MsgProto::WorldArmy*>(&::MsgProto::WorldArmy::default_instance());
  m_invest_ = const_cast< ::MsgProto::InvestigationReport*>(&::MsgProto::InvestigationReport::default_instance());
}

RoleArmy::RoleArmy(const RoleArmy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.RoleArmy)
}

void RoleArmy::SharedCtor() {
  _cached_size_ = 0;
  m_move_ = NULL;
  m_load_base_ = 0u;
  m_res_id_ = 0u;
  m_res_num_ = 0u;
  m_res_speed_ = 0u;
  m_move_length_ = 0;
  m_build_resid_ = 0u;
  m_invest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleArmy::~RoleArmy() {
  // @@protoc_insertion_point(destructor:MsgProto.RoleArmy)
  SharedDtor();
}

void RoleArmy::SharedDtor() {
  if (this != default_instance_) {
    delete m_move_;
    delete m_invest_;
  }
}

void RoleArmy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleArmy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleArmy_descriptor_;
}

const RoleArmy& RoleArmy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

RoleArmy* RoleArmy::default_instance_ = NULL;

RoleArmy* RoleArmy::New() const {
  return new RoleArmy;
}

void RoleArmy::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoleArmy*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 253) {
    ZR_(m_load_base_, m_build_resid_);
    if (has_m_move()) {
      if (m_move_ != NULL) m_move_->::MsgProto::WorldArmy::Clear();
    }
  }
  if (has_m_invest()) {
    if (m_invest_ != NULL) m_invest_->::MsgProto::InvestigationReport::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  m_soldier_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleArmy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.RoleArmy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgProto.WorldArmy m_move = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_move()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_m_soldier;
        break;
      }

      // repeated .MsgProto.RoleSoldier m_soldier = 2;
      case 2: {
        if (tag == 18) {
         parse_m_soldier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_soldier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_m_soldier;
        if (input->ExpectTag(24)) goto parse_m_load_base;
        break;
      }

      // optional uint32 m_load_base = 3;
      case 3: {
        if (tag == 24) {
         parse_m_load_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_load_base_)));
          set_has_m_load_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_res_id;
        break;
      }

      // optional uint32 m_res_id = 4;
      case 4: {
        if (tag == 32) {
         parse_m_res_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_res_id_)));
          set_has_m_res_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_m_res_num;
        break;
      }

      // optional uint32 m_res_num = 5;
      case 5: {
        if (tag == 40) {
         parse_m_res_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_res_num_)));
          set_has_m_res_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_m_res_speed;
        break;
      }

      // optional uint32 m_res_speed = 6;
      case 6: {
        if (tag == 48) {
         parse_m_res_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_res_speed_)));
          set_has_m_res_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_m_move_length;
        break;
      }

      // optional float m_move_length = 7;
      case 7: {
        if (tag == 61) {
         parse_m_move_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_move_length_)));
          set_has_m_move_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_m_build_resid;
        break;
      }

      // optional uint32 m_build_resid = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_m_build_resid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_build_resid_)));
          set_has_m_build_resid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_m_invest;
        break;
      }

      // optional .MsgProto.InvestigationReport m_invest = 9;
      case 9: {
        if (tag == 74) {
         parse_m_invest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_invest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.RoleArmy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.RoleArmy)
  return false;
#undef DO_
}

void RoleArmy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.RoleArmy)
  // optional .MsgProto.WorldArmy m_move = 1;
  if (has_m_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_move(), output);
  }

  // repeated .MsgProto.RoleSoldier m_soldier = 2;
  for (int i = 0; i < this->m_soldier_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_soldier(i), output);
  }

  // optional uint32 m_load_base = 3;
  if (has_m_load_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m_load_base(), output);
  }

  // optional uint32 m_res_id = 4;
  if (has_m_res_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->m_res_id(), output);
  }

  // optional uint32 m_res_num = 5;
  if (has_m_res_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->m_res_num(), output);
  }

  // optional uint32 m_res_speed = 6;
  if (has_m_res_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->m_res_speed(), output);
  }

  // optional float m_move_length = 7;
  if (has_m_move_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->m_move_length(), output);
  }

  // optional uint32 m_build_resid = 8 [default = 0];
  if (has_m_build_resid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->m_build_resid(), output);
  }

  // optional .MsgProto.InvestigationReport m_invest = 9;
  if (has_m_invest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_invest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.RoleArmy)
}

::google::protobuf::uint8* RoleArmy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.RoleArmy)
  // optional .MsgProto.WorldArmy m_move = 1;
  if (has_m_move()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_move(), target);
  }

  // repeated .MsgProto.RoleSoldier m_soldier = 2;
  for (int i = 0; i < this->m_soldier_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_soldier(i), target);
  }

  // optional uint32 m_load_base = 3;
  if (has_m_load_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m_load_base(), target);
  }

  // optional uint32 m_res_id = 4;
  if (has_m_res_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->m_res_id(), target);
  }

  // optional uint32 m_res_num = 5;
  if (has_m_res_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->m_res_num(), target);
  }

  // optional uint32 m_res_speed = 6;
  if (has_m_res_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->m_res_speed(), target);
  }

  // optional float m_move_length = 7;
  if (has_m_move_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->m_move_length(), target);
  }

  // optional uint32 m_build_resid = 8 [default = 0];
  if (has_m_build_resid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->m_build_resid(), target);
  }

  // optional .MsgProto.InvestigationReport m_invest = 9;
  if (has_m_invest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_invest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.RoleArmy)
  return target;
}

int RoleArmy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgProto.WorldArmy m_move = 1;
    if (has_m_move()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_move());
    }

    // optional uint32 m_load_base = 3;
    if (has_m_load_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_load_base());
    }

    // optional uint32 m_res_id = 4;
    if (has_m_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_res_id());
    }

    // optional uint32 m_res_num = 5;
    if (has_m_res_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_res_num());
    }

    // optional uint32 m_res_speed = 6;
    if (has_m_res_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_res_speed());
    }

    // optional float m_move_length = 7;
    if (has_m_move_length()) {
      total_size += 1 + 4;
    }

    // optional uint32 m_build_resid = 8 [default = 0];
    if (has_m_build_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_build_resid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .MsgProto.InvestigationReport m_invest = 9;
    if (has_m_invest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_invest());
    }

  }
  // repeated .MsgProto.RoleSoldier m_soldier = 2;
  total_size += 1 * this->m_soldier_size();
  for (int i = 0; i < this->m_soldier_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_soldier(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleArmy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleArmy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleArmy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleArmy::MergeFrom(const RoleArmy& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_soldier_.MergeFrom(from.m_soldier_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_move()) {
      mutable_m_move()->::MsgProto::WorldArmy::MergeFrom(from.m_move());
    }
    if (from.has_m_load_base()) {
      set_m_load_base(from.m_load_base());
    }
    if (from.has_m_res_id()) {
      set_m_res_id(from.m_res_id());
    }
    if (from.has_m_res_num()) {
      set_m_res_num(from.m_res_num());
    }
    if (from.has_m_res_speed()) {
      set_m_res_speed(from.m_res_speed());
    }
    if (from.has_m_move_length()) {
      set_m_move_length(from.m_move_length());
    }
    if (from.has_m_build_resid()) {
      set_m_build_resid(from.m_build_resid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_invest()) {
      mutable_m_invest()->::MsgProto::InvestigationReport::MergeFrom(from.m_invest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleArmy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleArmy::CopyFrom(const RoleArmy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleArmy::IsInitialized() const {

  return true;
}

void RoleArmy::Swap(RoleArmy* other) {
  if (other != this) {
    std::swap(m_move_, other->m_move_);
    m_soldier_.Swap(&other->m_soldier_);
    std::swap(m_load_base_, other->m_load_base_);
    std::swap(m_res_id_, other->m_res_id_);
    std::swap(m_res_num_, other->m_res_num_);
    std::swap(m_res_speed_, other->m_res_speed_);
    std::swap(m_move_length_, other->m_move_length_);
    std::swap(m_build_resid_, other->m_build_resid_);
    std::swap(m_invest_, other->m_invest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleArmy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleArmy_descriptor_;
  metadata.reflection = RoleArmy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleBuild::kMBuildidFieldNumber;
const int RoleBuild::kMFinishtimeFieldNumber;
const int RoleBuild::kMBuildtimeFieldNumber;
const int RoleBuild::kMBuilditemFieldNumber;
const int RoleBuild::kMBuilditemnumFieldNumber;
const int RoleBuild::kMHpFieldNumber;
#endif  // !_MSC_VER

RoleBuild::RoleBuild()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.RoleBuild)
}

void RoleBuild::InitAsDefaultInstance() {
  m_finishtime_ = const_cast< ::MsgProto::TimeInfo*>(&::MsgProto::TimeInfo::default_instance());
  m_buildtime_ = const_cast< ::MsgProto::TimeInfo*>(&::MsgProto::TimeInfo::default_instance());
}

RoleBuild::RoleBuild(const RoleBuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.RoleBuild)
}

void RoleBuild::SharedCtor() {
  _cached_size_ = 0;
  m_buildid_ = 0u;
  m_finishtime_ = NULL;
  m_buildtime_ = NULL;
  m_builditem_ = 0u;
  m_builditemnum_ = 0u;
  m_hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleBuild::~RoleBuild() {
  // @@protoc_insertion_point(destructor:MsgProto.RoleBuild)
  SharedDtor();
}

void RoleBuild::SharedDtor() {
  if (this != default_instance_) {
    delete m_finishtime_;
    delete m_buildtime_;
  }
}

void RoleBuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleBuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleBuild_descriptor_;
}

const RoleBuild& RoleBuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

RoleBuild* RoleBuild::default_instance_ = NULL;

RoleBuild* RoleBuild::New() const {
  return new RoleBuild;
}

void RoleBuild::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoleBuild*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(m_buildid_, m_builditem_);
    ZR_(m_builditemnum_, m_hp_);
    if (has_m_finishtime()) {
      if (m_finishtime_ != NULL) m_finishtime_->::MsgProto::TimeInfo::Clear();
    }
    if (has_m_buildtime()) {
      if (m_buildtime_ != NULL) m_buildtime_->::MsgProto::TimeInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleBuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.RoleBuild)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 m_buildid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_buildid_)));
          set_has_m_buildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_m_finishtime;
        break;
      }

      // optional .MsgProto.TimeInfo m_finishtime = 2;
      case 2: {
        if (tag == 18) {
         parse_m_finishtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_finishtime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_m_buildtime;
        break;
      }

      // optional .MsgProto.TimeInfo m_buildtime = 3;
      case 3: {
        if (tag == 26) {
         parse_m_buildtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_buildtime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_m_builditem;
        break;
      }

      // optional uint32 m_builditem = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_m_builditem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_builditem_)));
          set_has_m_builditem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_m_builditemnum;
        break;
      }

      // optional uint32 m_builditemnum = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_m_builditemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_builditemnum_)));
          set_has_m_builditemnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_m_hp;
        break;
      }

      // optional uint32 m_hp = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_m_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_hp_)));
          set_has_m_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.RoleBuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.RoleBuild)
  return false;
#undef DO_
}

void RoleBuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.RoleBuild)
  // optional uint32 m_buildid = 1 [default = 0];
  if (has_m_buildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_buildid(), output);
  }

  // optional .MsgProto.TimeInfo m_finishtime = 2;
  if (has_m_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_finishtime(), output);
  }

  // optional .MsgProto.TimeInfo m_buildtime = 3;
  if (has_m_buildtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_buildtime(), output);
  }

  // optional uint32 m_builditem = 5 [default = 0];
  if (has_m_builditem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->m_builditem(), output);
  }

  // optional uint32 m_builditemnum = 6 [default = 0];
  if (has_m_builditemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->m_builditemnum(), output);
  }

  // optional uint32 m_hp = 7 [default = 0];
  if (has_m_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->m_hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.RoleBuild)
}

::google::protobuf::uint8* RoleBuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.RoleBuild)
  // optional uint32 m_buildid = 1 [default = 0];
  if (has_m_buildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_buildid(), target);
  }

  // optional .MsgProto.TimeInfo m_finishtime = 2;
  if (has_m_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_finishtime(), target);
  }

  // optional .MsgProto.TimeInfo m_buildtime = 3;
  if (has_m_buildtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_buildtime(), target);
  }

  // optional uint32 m_builditem = 5 [default = 0];
  if (has_m_builditem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->m_builditem(), target);
  }

  // optional uint32 m_builditemnum = 6 [default = 0];
  if (has_m_builditemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->m_builditemnum(), target);
  }

  // optional uint32 m_hp = 7 [default = 0];
  if (has_m_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->m_hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.RoleBuild)
  return target;
}

int RoleBuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 m_buildid = 1 [default = 0];
    if (has_m_buildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_buildid());
    }

    // optional .MsgProto.TimeInfo m_finishtime = 2;
    if (has_m_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_finishtime());
    }

    // optional .MsgProto.TimeInfo m_buildtime = 3;
    if (has_m_buildtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_buildtime());
    }

    // optional uint32 m_builditem = 5 [default = 0];
    if (has_m_builditem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_builditem());
    }

    // optional uint32 m_builditemnum = 6 [default = 0];
    if (has_m_builditemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_builditemnum());
    }

    // optional uint32 m_hp = 7 [default = 0];
    if (has_m_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleBuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleBuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleBuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleBuild::MergeFrom(const RoleBuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_buildid()) {
      set_m_buildid(from.m_buildid());
    }
    if (from.has_m_finishtime()) {
      mutable_m_finishtime()->::MsgProto::TimeInfo::MergeFrom(from.m_finishtime());
    }
    if (from.has_m_buildtime()) {
      mutable_m_buildtime()->::MsgProto::TimeInfo::MergeFrom(from.m_buildtime());
    }
    if (from.has_m_builditem()) {
      set_m_builditem(from.m_builditem());
    }
    if (from.has_m_builditemnum()) {
      set_m_builditemnum(from.m_builditemnum());
    }
    if (from.has_m_hp()) {
      set_m_hp(from.m_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleBuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleBuild::CopyFrom(const RoleBuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleBuild::IsInitialized() const {

  return true;
}

void RoleBuild::Swap(RoleBuild* other) {
  if (other != this) {
    std::swap(m_buildid_, other->m_buildid_);
    std::swap(m_finishtime_, other->m_finishtime_);
    std::swap(m_buildtime_, other->m_buildtime_);
    std::swap(m_builditem_, other->m_builditem_);
    std::swap(m_builditemnum_, other->m_builditemnum_);
    std::swap(m_hp_, other->m_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleBuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleBuild_descriptor_;
  metadata.reflection = RoleBuild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleCity::kMUCityIDFieldNumber;
const int RoleCity::kMURoleIDFieldNumber;
const int RoleCity::kMUTableIDFieldNumber;
const int RoleCity::kMStrNameFieldNumber;
const int RoleCity::kMPosFieldNumber;
const int RoleCity::kMFoodFieldNumber;
const int RoleCity::kMIronFieldNumber;
const int RoleCity::kMCrystalFieldNumber;
const int RoleCity::kMArmysFieldNumber;
const int RoleCity::kMSoldierFieldNumber;
const int RoleCity::kMBuildFieldNumber;
#endif  // !_MSC_VER

RoleCity::RoleCity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.RoleCity)
}

void RoleCity::InitAsDefaultInstance() {
  m_pos_ = const_cast< ::MsgProto::WorldView*>(&::MsgProto::WorldView::default_instance());
}

RoleCity::RoleCity(const RoleCity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.RoleCity)
}

void RoleCity::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  m_ucityid_ = 0u;
  m_uroleid_ = 0u;
  m_utableid_ = 0u;
  m_strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m_pos_ = NULL;
  m_food_ = 0u;
  m_iron_ = 0u;
  m_crystal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleCity::~RoleCity() {
  // @@protoc_insertion_point(destructor:MsgProto.RoleCity)
  SharedDtor();
}

void RoleCity::SharedDtor() {
  if (m_strname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete m_strname_;
  }
  if (this != default_instance_) {
    delete m_pos_;
  }
}

void RoleCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleCity_descriptor_;
}

const RoleCity& RoleCity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

RoleCity* RoleCity::default_instance_ = NULL;

RoleCity* RoleCity::New() const {
  return new RoleCity;
}

void RoleCity::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoleCity*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(m_ucityid_, m_uroleid_);
    ZR_(m_utableid_, m_food_);
    ZR_(m_iron_, m_crystal_);
    if (has_m_strname()) {
      if (m_strname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        m_strname_->clear();
      }
    }
    if (has_m_pos()) {
      if (m_pos_ != NULL) m_pos_->::MsgProto::WorldView::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  m_armys_.Clear();
  m_soldier_.Clear();
  m_build_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.RoleCity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 m_uCityID = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_ucityid_)));
          set_has_m_ucityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_uRoleID;
        break;
      }

      // optional uint32 m_uRoleID = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_uRoleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_uroleid_)));
          set_has_m_uroleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_uTableID;
        break;
      }

      // optional uint32 m_uTableID = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_m_uTableID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_utableid_)));
          set_has_m_utableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_m_strName;
        break;
      }

      // optional bytes m_strName = 4;
      case 4: {
        if (tag == 34) {
         parse_m_strName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_m_strname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_m_pos;
        break;
      }

      // optional .MsgProto.WorldView m_pos = 5;
      case 5: {
        if (tag == 42) {
         parse_m_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_m_food;
        break;
      }

      // optional uint32 m_food = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_m_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_food_)));
          set_has_m_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_m_iron;
        break;
      }

      // optional uint32 m_iron = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_m_iron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_iron_)));
          set_has_m_iron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_m_crystal;
        break;
      }

      // optional uint32 m_crystal = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_m_crystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_crystal_)));
          set_has_m_crystal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_m_armys;
        break;
      }

      // repeated .MsgProto.RoleArmy m_armys = 9;
      case 9: {
        if (tag == 74) {
         parse_m_armys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_armys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_m_armys;
        if (input->ExpectTag(82)) goto parse_m_soldier;
        break;
      }

      // repeated .MsgProto.RoleSoldier m_soldier = 10;
      case 10: {
        if (tag == 82) {
         parse_m_soldier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_soldier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_m_soldier;
        if (input->ExpectTag(90)) goto parse_m_build;
        break;
      }

      // repeated .MsgProto.RoleBuild m_build = 11;
      case 11: {
        if (tag == 90) {
         parse_m_build:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_build()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_m_build;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.RoleCity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.RoleCity)
  return false;
#undef DO_
}

void RoleCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.RoleCity)
  // optional uint32 m_uCityID = 1 [default = 0];
  if (has_m_ucityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_ucityid(), output);
  }

  // optional uint32 m_uRoleID = 2 [default = 0];
  if (has_m_uroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_uroleid(), output);
  }

  // optional uint32 m_uTableID = 3 [default = 0];
  if (has_m_utableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m_utableid(), output);
  }

  // optional bytes m_strName = 4;
  if (has_m_strname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->m_strname(), output);
  }

  // optional .MsgProto.WorldView m_pos = 5;
  if (has_m_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_pos(), output);
  }

  // optional uint32 m_food = 6 [default = 0];
  if (has_m_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->m_food(), output);
  }

  // optional uint32 m_iron = 7 [default = 0];
  if (has_m_iron()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->m_iron(), output);
  }

  // optional uint32 m_crystal = 8 [default = 0];
  if (has_m_crystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->m_crystal(), output);
  }

  // repeated .MsgProto.RoleArmy m_armys = 9;
  for (int i = 0; i < this->m_armys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_armys(i), output);
  }

  // repeated .MsgProto.RoleSoldier m_soldier = 10;
  for (int i = 0; i < this->m_soldier_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_soldier(i), output);
  }

  // repeated .MsgProto.RoleBuild m_build = 11;
  for (int i = 0; i < this->m_build_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->m_build(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.RoleCity)
}

::google::protobuf::uint8* RoleCity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.RoleCity)
  // optional uint32 m_uCityID = 1 [default = 0];
  if (has_m_ucityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_ucityid(), target);
  }

  // optional uint32 m_uRoleID = 2 [default = 0];
  if (has_m_uroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_uroleid(), target);
  }

  // optional uint32 m_uTableID = 3 [default = 0];
  if (has_m_utableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m_utableid(), target);
  }

  // optional bytes m_strName = 4;
  if (has_m_strname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->m_strname(), target);
  }

  // optional .MsgProto.WorldView m_pos = 5;
  if (has_m_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_pos(), target);
  }

  // optional uint32 m_food = 6 [default = 0];
  if (has_m_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->m_food(), target);
  }

  // optional uint32 m_iron = 7 [default = 0];
  if (has_m_iron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->m_iron(), target);
  }

  // optional uint32 m_crystal = 8 [default = 0];
  if (has_m_crystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->m_crystal(), target);
  }

  // repeated .MsgProto.RoleArmy m_armys = 9;
  for (int i = 0; i < this->m_armys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_armys(i), target);
  }

  // repeated .MsgProto.RoleSoldier m_soldier = 10;
  for (int i = 0; i < this->m_soldier_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_soldier(i), target);
  }

  // repeated .MsgProto.RoleBuild m_build = 11;
  for (int i = 0; i < this->m_build_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->m_build(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.RoleCity)
  return target;
}

int RoleCity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 m_uCityID = 1 [default = 0];
    if (has_m_ucityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_ucityid());
    }

    // optional uint32 m_uRoleID = 2 [default = 0];
    if (has_m_uroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_uroleid());
    }

    // optional uint32 m_uTableID = 3 [default = 0];
    if (has_m_utableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_utableid());
    }

    // optional bytes m_strName = 4;
    if (has_m_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->m_strname());
    }

    // optional .MsgProto.WorldView m_pos = 5;
    if (has_m_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_pos());
    }

    // optional uint32 m_food = 6 [default = 0];
    if (has_m_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_food());
    }

    // optional uint32 m_iron = 7 [default = 0];
    if (has_m_iron()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_iron());
    }

    // optional uint32 m_crystal = 8 [default = 0];
    if (has_m_crystal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_crystal());
    }

  }
  // repeated .MsgProto.RoleArmy m_armys = 9;
  total_size += 1 * this->m_armys_size();
  for (int i = 0; i < this->m_armys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_armys(i));
  }

  // repeated .MsgProto.RoleSoldier m_soldier = 10;
  total_size += 1 * this->m_soldier_size();
  for (int i = 0; i < this->m_soldier_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_soldier(i));
  }

  // repeated .MsgProto.RoleBuild m_build = 11;
  total_size += 1 * this->m_build_size();
  for (int i = 0; i < this->m_build_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_build(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleCity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleCity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleCity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleCity::MergeFrom(const RoleCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_armys_.MergeFrom(from.m_armys_);
  m_soldier_.MergeFrom(from.m_soldier_);
  m_build_.MergeFrom(from.m_build_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ucityid()) {
      set_m_ucityid(from.m_ucityid());
    }
    if (from.has_m_uroleid()) {
      set_m_uroleid(from.m_uroleid());
    }
    if (from.has_m_utableid()) {
      set_m_utableid(from.m_utableid());
    }
    if (from.has_m_strname()) {
      set_m_strname(from.m_strname());
    }
    if (from.has_m_pos()) {
      mutable_m_pos()->::MsgProto::WorldView::MergeFrom(from.m_pos());
    }
    if (from.has_m_food()) {
      set_m_food(from.m_food());
    }
    if (from.has_m_iron()) {
      set_m_iron(from.m_iron());
    }
    if (from.has_m_crystal()) {
      set_m_crystal(from.m_crystal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleCity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleCity::CopyFrom(const RoleCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleCity::IsInitialized() const {

  return true;
}

void RoleCity::Swap(RoleCity* other) {
  if (other != this) {
    std::swap(m_ucityid_, other->m_ucityid_);
    std::swap(m_uroleid_, other->m_uroleid_);
    std::swap(m_utableid_, other->m_utableid_);
    std::swap(m_strname_, other->m_strname_);
    std::swap(m_pos_, other->m_pos_);
    std::swap(m_food_, other->m_food_);
    std::swap(m_iron_, other->m_iron_);
    std::swap(m_crystal_, other->m_crystal_);
    m_armys_.Swap(&other->m_armys_);
    m_soldier_.Swap(&other->m_soldier_);
    m_build_.Swap(&other->m_build_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleCity_descriptor_;
  metadata.reflection = RoleCity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleCityVector::kMCitysFieldNumber;
#endif  // !_MSC_VER

RoleCityVector::RoleCityVector()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.RoleCityVector)
}

void RoleCityVector::InitAsDefaultInstance() {
}

RoleCityVector::RoleCityVector(const RoleCityVector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.RoleCityVector)
}

void RoleCityVector::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleCityVector::~RoleCityVector() {
  // @@protoc_insertion_point(destructor:MsgProto.RoleCityVector)
  SharedDtor();
}

void RoleCityVector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleCityVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleCityVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleCityVector_descriptor_;
}

const RoleCityVector& RoleCityVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

RoleCityVector* RoleCityVector::default_instance_ = NULL;

RoleCityVector* RoleCityVector::New() const {
  return new RoleCityVector;
}

void RoleCityVector::Clear() {
  m_citys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleCityVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.RoleCityVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgProto.RoleCity m_citys = 1;
      case 1: {
        if (tag == 10) {
         parse_m_citys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_citys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_m_citys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.RoleCityVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.RoleCityVector)
  return false;
#undef DO_
}

void RoleCityVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.RoleCityVector)
  // repeated .MsgProto.RoleCity m_citys = 1;
  for (int i = 0; i < this->m_citys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_citys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.RoleCityVector)
}

::google::protobuf::uint8* RoleCityVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.RoleCityVector)
  // repeated .MsgProto.RoleCity m_citys = 1;
  for (int i = 0; i < this->m_citys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_citys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.RoleCityVector)
  return target;
}

int RoleCityVector::ByteSize() const {
  int total_size = 0;

  // repeated .MsgProto.RoleCity m_citys = 1;
  total_size += 1 * this->m_citys_size();
  for (int i = 0; i < this->m_citys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_citys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleCityVector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleCityVector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleCityVector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleCityVector::MergeFrom(const RoleCityVector& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_citys_.MergeFrom(from.m_citys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleCityVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleCityVector::CopyFrom(const RoleCityVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleCityVector::IsInitialized() const {

  return true;
}

void RoleCityVector::Swap(RoleCityVector* other) {
  if (other != this) {
    m_citys_.Swap(&other->m_citys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleCityVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleCityVector_descriptor_;
  metadata.reflection = RoleCityVector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleFightTitle::kMStrNameFieldNumber;
const int RoleFightTitle::kMLevelFieldNumber;
const int RoleFightTitle::kMPosFieldNumber;
#endif  // !_MSC_VER

RoleFightTitle::RoleFightTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.RoleFightTitle)
}

void RoleFightTitle::InitAsDefaultInstance() {
  m_pos_ = const_cast< ::MsgProto::WorldPos*>(&::MsgProto::WorldPos::default_instance());
}

RoleFightTitle::RoleFightTitle(const RoleFightTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.RoleFightTitle)
}

void RoleFightTitle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  m_strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m_level_ = 0u;
  m_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleFightTitle::~RoleFightTitle() {
  // @@protoc_insertion_point(destructor:MsgProto.RoleFightTitle)
  SharedDtor();
}

void RoleFightTitle::SharedDtor() {
  if (m_strname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete m_strname_;
  }
  if (this != default_instance_) {
    delete m_pos_;
  }
}

void RoleFightTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleFightTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleFightTitle_descriptor_;
}

const RoleFightTitle& RoleFightTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

RoleFightTitle* RoleFightTitle::default_instance_ = NULL;

RoleFightTitle* RoleFightTitle::New() const {
  return new RoleFightTitle;
}

void RoleFightTitle::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_m_strname()) {
      if (m_strname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        m_strname_->clear();
      }
    }
    m_level_ = 0u;
    if (has_m_pos()) {
      if (m_pos_ != NULL) m_pos_->::MsgProto::WorldPos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleFightTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.RoleFightTitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes m_strName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_m_strname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_level;
        break;
      }

      // optional uint32 m_level = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_m_pos;
        break;
      }

      // optional .MsgProto.WorldPos m_pos = 3;
      case 3: {
        if (tag == 26) {
         parse_m_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.RoleFightTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.RoleFightTitle)
  return false;
#undef DO_
}

void RoleFightTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.RoleFightTitle)
  // optional bytes m_strName = 1;
  if (has_m_strname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->m_strname(), output);
  }

  // optional uint32 m_level = 2 [default = 0];
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_level(), output);
  }

  // optional .MsgProto.WorldPos m_pos = 3;
  if (has_m_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.RoleFightTitle)
}

::google::protobuf::uint8* RoleFightTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.RoleFightTitle)
  // optional bytes m_strName = 1;
  if (has_m_strname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->m_strname(), target);
  }

  // optional uint32 m_level = 2 [default = 0];
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_level(), target);
  }

  // optional .MsgProto.WorldPos m_pos = 3;
  if (has_m_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.RoleFightTitle)
  return target;
}

int RoleFightTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes m_strName = 1;
    if (has_m_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->m_strname());
    }

    // optional uint32 m_level = 2 [default = 0];
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_level());
    }

    // optional .MsgProto.WorldPos m_pos = 3;
    if (has_m_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleFightTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleFightTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleFightTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleFightTitle::MergeFrom(const RoleFightTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_strname()) {
      set_m_strname(from.m_strname());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_pos()) {
      mutable_m_pos()->::MsgProto::WorldPos::MergeFrom(from.m_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleFightTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleFightTitle::CopyFrom(const RoleFightTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleFightTitle::IsInitialized() const {

  return true;
}

void RoleFightTitle::Swap(RoleFightTitle* other) {
  if (other != this) {
    std::swap(m_strname_, other->m_strname_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_pos_, other->m_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleFightTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleFightTitle_descriptor_;
  metadata.reflection = RoleFightTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResPlunder::kMIdFieldNumber;
const int ResPlunder::kMSumFieldNumber;
const int ResPlunder::kMLostFieldNumber;
const int ResPlunder::kMGetFieldNumber;
#endif  // !_MSC_VER

ResPlunder::ResPlunder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.ResPlunder)
}

void ResPlunder::InitAsDefaultInstance() {
}

ResPlunder::ResPlunder(const ResPlunder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.ResPlunder)
}

void ResPlunder::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0u;
  m_sum_ = 0u;
  m_lost_ = 0u;
  m_get_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResPlunder::~ResPlunder() {
  // @@protoc_insertion_point(destructor:MsgProto.ResPlunder)
  SharedDtor();
}

void ResPlunder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResPlunder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResPlunder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResPlunder_descriptor_;
}

const ResPlunder& ResPlunder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

ResPlunder* ResPlunder::default_instance_ = NULL;

ResPlunder* ResPlunder::New() const {
  return new ResPlunder;
}

void ResPlunder::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResPlunder*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(m_id_, m_get_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResPlunder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.ResPlunder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 m_id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_sum;
        break;
      }

      // optional uint32 m_sum = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_sum_)));
          set_has_m_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_lost;
        break;
      }

      // optional uint32 m_lost = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_m_lost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_lost_)));
          set_has_m_lost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_get;
        break;
      }

      // optional uint32 m_get = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_m_get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_get_)));
          set_has_m_get();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.ResPlunder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.ResPlunder)
  return false;
#undef DO_
}

void ResPlunder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.ResPlunder)
  // optional uint32 m_id = 1 [default = 0];
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_id(), output);
  }

  // optional uint32 m_sum = 2 [default = 0];
  if (has_m_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_sum(), output);
  }

  // optional uint32 m_lost = 3 [default = 0];
  if (has_m_lost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m_lost(), output);
  }

  // optional uint32 m_get = 4 [default = 0];
  if (has_m_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->m_get(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.ResPlunder)
}

::google::protobuf::uint8* ResPlunder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.ResPlunder)
  // optional uint32 m_id = 1 [default = 0];
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_id(), target);
  }

  // optional uint32 m_sum = 2 [default = 0];
  if (has_m_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_sum(), target);
  }

  // optional uint32 m_lost = 3 [default = 0];
  if (has_m_lost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m_lost(), target);
  }

  // optional uint32 m_get = 4 [default = 0];
  if (has_m_get()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->m_get(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.ResPlunder)
  return target;
}

int ResPlunder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 m_id = 1 [default = 0];
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_id());
    }

    // optional uint32 m_sum = 2 [default = 0];
    if (has_m_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_sum());
    }

    // optional uint32 m_lost = 3 [default = 0];
    if (has_m_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_lost());
    }

    // optional uint32 m_get = 4 [default = 0];
    if (has_m_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_get());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResPlunder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResPlunder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResPlunder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResPlunder::MergeFrom(const ResPlunder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_sum()) {
      set_m_sum(from.m_sum());
    }
    if (from.has_m_lost()) {
      set_m_lost(from.m_lost());
    }
    if (from.has_m_get()) {
      set_m_get(from.m_get());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResPlunder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResPlunder::CopyFrom(const ResPlunder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResPlunder::IsInitialized() const {

  return true;
}

void ResPlunder::Swap(ResPlunder* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_sum_, other->m_sum_);
    std::swap(m_lost_, other->m_lost_);
    std::swap(m_get_, other->m_get_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResPlunder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResPlunder_descriptor_;
  metadata.reflection = ResPlunder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoldierOverView::kMPowerSumFieldNumber;
const int SoldierOverView::kMPowerArmyFieldNumber;
const int SoldierOverView::kMPowerTalentFieldNumber;
const int SoldierOverView::kMPowerEquipFieldNumber;
const int SoldierOverView::kMPowerTechFieldNumber;
const int SoldierOverView::kMPowerTowerFieldNumber;
const int SoldierOverView::kMPowerLoseFieldNumber;
const int SoldierOverView::kMSoldierSumFieldNumber;
const int SoldierOverView::kMSoldierKillFieldNumber;
const int SoldierOverView::kMKillsFieldNumber;
const int SoldierOverView::kMSoldierDieFieldNumber;
const int SoldierOverView::kMDiesFieldNumber;
const int SoldierOverView::kMSoldierHurtFieldNumber;
const int SoldierOverView::kMHurtsFieldNumber;
const int SoldierOverView::kMSoldierLiveFieldNumber;
const int SoldierOverView::kMLivesFieldNumber;
#endif  // !_MSC_VER

SoldierOverView::SoldierOverView()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.SoldierOverView)
}

void SoldierOverView::InitAsDefaultInstance() {
}

SoldierOverView::SoldierOverView(const SoldierOverView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.SoldierOverView)
}

void SoldierOverView::SharedCtor() {
  _cached_size_ = 0;
  m_power_sum_ = 0u;
  m_power_army_ = 0u;
  m_power_talent_ = 0u;
  m_power_equip_ = 0u;
  m_power_tech_ = 0u;
  m_power_tower_ = 0u;
  m_power_lose_ = 0u;
  m_soldier_sum_ = 0u;
  m_soldier_kill_ = 0u;
  m_soldier_die_ = 0u;
  m_soldier_hurt_ = 0u;
  m_soldier_live_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoldierOverView::~SoldierOverView() {
  // @@protoc_insertion_point(destructor:MsgProto.SoldierOverView)
  SharedDtor();
}

void SoldierOverView::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoldierOverView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoldierOverView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoldierOverView_descriptor_;
}

const SoldierOverView& SoldierOverView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

SoldierOverView* SoldierOverView::default_instance_ = NULL;

SoldierOverView* SoldierOverView::New() const {
  return new SoldierOverView;
}

void SoldierOverView::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SoldierOverView*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(m_power_sum_, m_soldier_sum_);
  }
  ZR_(m_soldier_kill_, m_soldier_die_);
  ZR_(m_soldier_hurt_, m_soldier_live_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  m_kills_.Clear();
  m_dies_.Clear();
  m_hurts_.Clear();
  m_lives_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoldierOverView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.SoldierOverView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 m_power_sum = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_power_sum_)));
          set_has_m_power_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_power_army;
        break;
      }

      // optional uint32 m_power_army = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_power_army:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_power_army_)));
          set_has_m_power_army();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_power_talent;
        break;
      }

      // optional uint32 m_power_talent = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_m_power_talent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_power_talent_)));
          set_has_m_power_talent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_power_equip;
        break;
      }

      // optional uint32 m_power_equip = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_m_power_equip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_power_equip_)));
          set_has_m_power_equip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_m_power_tech;
        break;
      }

      // optional uint32 m_power_tech = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_m_power_tech:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_power_tech_)));
          set_has_m_power_tech();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_m_power_tower;
        break;
      }

      // optional uint32 m_power_tower = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_m_power_tower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_power_tower_)));
          set_has_m_power_tower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_m_power_lose;
        break;
      }

      // optional uint32 m_power_lose = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_m_power_lose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_power_lose_)));
          set_has_m_power_lose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_m_soldier_sum;
        break;
      }

      // optional uint32 m_soldier_sum = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_m_soldier_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_soldier_sum_)));
          set_has_m_soldier_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_m_soldier_kill;
        break;
      }

      // optional uint32 m_soldier_kill = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_m_soldier_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_soldier_kill_)));
          set_has_m_soldier_kill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_m_kills;
        break;
      }

      // repeated .MsgProto.SKeyValuePair m_kills = 10;
      case 10: {
        if (tag == 82) {
         parse_m_kills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_kills()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_m_kills;
        if (input->ExpectTag(88)) goto parse_m_soldier_die;
        break;
      }

      // optional uint32 m_soldier_die = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_m_soldier_die:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_soldier_die_)));
          set_has_m_soldier_die();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_m_dies;
        break;
      }

      // repeated .MsgProto.SKeyValuePair m_dies = 12;
      case 12: {
        if (tag == 98) {
         parse_m_dies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_dies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_m_dies;
        if (input->ExpectTag(104)) goto parse_m_soldier_hurt;
        break;
      }

      // optional uint32 m_soldier_hurt = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_m_soldier_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_soldier_hurt_)));
          set_has_m_soldier_hurt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_m_hurts;
        break;
      }

      // repeated .MsgProto.SKeyValuePair m_hurts = 14;
      case 14: {
        if (tag == 114) {
         parse_m_hurts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_hurts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_m_hurts;
        if (input->ExpectTag(120)) goto parse_m_soldier_live;
        break;
      }

      // optional uint32 m_soldier_live = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_m_soldier_live:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_soldier_live_)));
          set_has_m_soldier_live();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_m_lives;
        break;
      }

      // repeated .MsgProto.SKeyValuePair m_lives = 16;
      case 16: {
        if (tag == 130) {
         parse_m_lives:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_lives()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_m_lives;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.SoldierOverView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.SoldierOverView)
  return false;
#undef DO_
}

void SoldierOverView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.SoldierOverView)
  // optional uint32 m_power_sum = 1 [default = 0];
  if (has_m_power_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_power_sum(), output);
  }

  // optional uint32 m_power_army = 2 [default = 0];
  if (has_m_power_army()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_power_army(), output);
  }

  // optional uint32 m_power_talent = 3 [default = 0];
  if (has_m_power_talent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m_power_talent(), output);
  }

  // optional uint32 m_power_equip = 4 [default = 0];
  if (has_m_power_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->m_power_equip(), output);
  }

  // optional uint32 m_power_tech = 5 [default = 0];
  if (has_m_power_tech()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->m_power_tech(), output);
  }

  // optional uint32 m_power_tower = 6 [default = 0];
  if (has_m_power_tower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->m_power_tower(), output);
  }

  // optional uint32 m_power_lose = 7 [default = 0];
  if (has_m_power_lose()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->m_power_lose(), output);
  }

  // optional uint32 m_soldier_sum = 8 [default = 0];
  if (has_m_soldier_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->m_soldier_sum(), output);
  }

  // optional uint32 m_soldier_kill = 9 [default = 0];
  if (has_m_soldier_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->m_soldier_kill(), output);
  }

  // repeated .MsgProto.SKeyValuePair m_kills = 10;
  for (int i = 0; i < this->m_kills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_kills(i), output);
  }

  // optional uint32 m_soldier_die = 11 [default = 0];
  if (has_m_soldier_die()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->m_soldier_die(), output);
  }

  // repeated .MsgProto.SKeyValuePair m_dies = 12;
  for (int i = 0; i < this->m_dies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->m_dies(i), output);
  }

  // optional uint32 m_soldier_hurt = 13 [default = 0];
  if (has_m_soldier_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->m_soldier_hurt(), output);
  }

  // repeated .MsgProto.SKeyValuePair m_hurts = 14;
  for (int i = 0; i < this->m_hurts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->m_hurts(i), output);
  }

  // optional uint32 m_soldier_live = 15 [default = 0];
  if (has_m_soldier_live()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->m_soldier_live(), output);
  }

  // repeated .MsgProto.SKeyValuePair m_lives = 16;
  for (int i = 0; i < this->m_lives_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->m_lives(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.SoldierOverView)
}

::google::protobuf::uint8* SoldierOverView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.SoldierOverView)
  // optional uint32 m_power_sum = 1 [default = 0];
  if (has_m_power_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_power_sum(), target);
  }

  // optional uint32 m_power_army = 2 [default = 0];
  if (has_m_power_army()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_power_army(), target);
  }

  // optional uint32 m_power_talent = 3 [default = 0];
  if (has_m_power_talent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m_power_talent(), target);
  }

  // optional uint32 m_power_equip = 4 [default = 0];
  if (has_m_power_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->m_power_equip(), target);
  }

  // optional uint32 m_power_tech = 5 [default = 0];
  if (has_m_power_tech()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->m_power_tech(), target);
  }

  // optional uint32 m_power_tower = 6 [default = 0];
  if (has_m_power_tower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->m_power_tower(), target);
  }

  // optional uint32 m_power_lose = 7 [default = 0];
  if (has_m_power_lose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->m_power_lose(), target);
  }

  // optional uint32 m_soldier_sum = 8 [default = 0];
  if (has_m_soldier_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->m_soldier_sum(), target);
  }

  // optional uint32 m_soldier_kill = 9 [default = 0];
  if (has_m_soldier_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->m_soldier_kill(), target);
  }

  // repeated .MsgProto.SKeyValuePair m_kills = 10;
  for (int i = 0; i < this->m_kills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_kills(i), target);
  }

  // optional uint32 m_soldier_die = 11 [default = 0];
  if (has_m_soldier_die()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->m_soldier_die(), target);
  }

  // repeated .MsgProto.SKeyValuePair m_dies = 12;
  for (int i = 0; i < this->m_dies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->m_dies(i), target);
  }

  // optional uint32 m_soldier_hurt = 13 [default = 0];
  if (has_m_soldier_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->m_soldier_hurt(), target);
  }

  // repeated .MsgProto.SKeyValuePair m_hurts = 14;
  for (int i = 0; i < this->m_hurts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->m_hurts(i), target);
  }

  // optional uint32 m_soldier_live = 15 [default = 0];
  if (has_m_soldier_live()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->m_soldier_live(), target);
  }

  // repeated .MsgProto.SKeyValuePair m_lives = 16;
  for (int i = 0; i < this->m_lives_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->m_lives(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.SoldierOverView)
  return target;
}

int SoldierOverView::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 m_power_sum = 1 [default = 0];
    if (has_m_power_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_power_sum());
    }

    // optional uint32 m_power_army = 2 [default = 0];
    if (has_m_power_army()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_power_army());
    }

    // optional uint32 m_power_talent = 3 [default = 0];
    if (has_m_power_talent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_power_talent());
    }

    // optional uint32 m_power_equip = 4 [default = 0];
    if (has_m_power_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_power_equip());
    }

    // optional uint32 m_power_tech = 5 [default = 0];
    if (has_m_power_tech()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_power_tech());
    }

    // optional uint32 m_power_tower = 6 [default = 0];
    if (has_m_power_tower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_power_tower());
    }

    // optional uint32 m_power_lose = 7 [default = 0];
    if (has_m_power_lose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_power_lose());
    }

    // optional uint32 m_soldier_sum = 8 [default = 0];
    if (has_m_soldier_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_soldier_sum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 m_soldier_kill = 9 [default = 0];
    if (has_m_soldier_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_soldier_kill());
    }

    // optional uint32 m_soldier_die = 11 [default = 0];
    if (has_m_soldier_die()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_soldier_die());
    }

    // optional uint32 m_soldier_hurt = 13 [default = 0];
    if (has_m_soldier_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_soldier_hurt());
    }

    // optional uint32 m_soldier_live = 15 [default = 0];
    if (has_m_soldier_live()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_soldier_live());
    }

  }
  // repeated .MsgProto.SKeyValuePair m_kills = 10;
  total_size += 1 * this->m_kills_size();
  for (int i = 0; i < this->m_kills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_kills(i));
  }

  // repeated .MsgProto.SKeyValuePair m_dies = 12;
  total_size += 1 * this->m_dies_size();
  for (int i = 0; i < this->m_dies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_dies(i));
  }

  // repeated .MsgProto.SKeyValuePair m_hurts = 14;
  total_size += 1 * this->m_hurts_size();
  for (int i = 0; i < this->m_hurts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_hurts(i));
  }

  // repeated .MsgProto.SKeyValuePair m_lives = 16;
  total_size += 2 * this->m_lives_size();
  for (int i = 0; i < this->m_lives_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_lives(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoldierOverView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoldierOverView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoldierOverView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoldierOverView::MergeFrom(const SoldierOverView& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_kills_.MergeFrom(from.m_kills_);
  m_dies_.MergeFrom(from.m_dies_);
  m_hurts_.MergeFrom(from.m_hurts_);
  m_lives_.MergeFrom(from.m_lives_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_power_sum()) {
      set_m_power_sum(from.m_power_sum());
    }
    if (from.has_m_power_army()) {
      set_m_power_army(from.m_power_army());
    }
    if (from.has_m_power_talent()) {
      set_m_power_talent(from.m_power_talent());
    }
    if (from.has_m_power_equip()) {
      set_m_power_equip(from.m_power_equip());
    }
    if (from.has_m_power_tech()) {
      set_m_power_tech(from.m_power_tech());
    }
    if (from.has_m_power_tower()) {
      set_m_power_tower(from.m_power_tower());
    }
    if (from.has_m_power_lose()) {
      set_m_power_lose(from.m_power_lose());
    }
    if (from.has_m_soldier_sum()) {
      set_m_soldier_sum(from.m_soldier_sum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_soldier_kill()) {
      set_m_soldier_kill(from.m_soldier_kill());
    }
    if (from.has_m_soldier_die()) {
      set_m_soldier_die(from.m_soldier_die());
    }
    if (from.has_m_soldier_hurt()) {
      set_m_soldier_hurt(from.m_soldier_hurt());
    }
    if (from.has_m_soldier_live()) {
      set_m_soldier_live(from.m_soldier_live());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoldierOverView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoldierOverView::CopyFrom(const SoldierOverView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoldierOverView::IsInitialized() const {

  return true;
}

void SoldierOverView::Swap(SoldierOverView* other) {
  if (other != this) {
    std::swap(m_power_sum_, other->m_power_sum_);
    std::swap(m_power_army_, other->m_power_army_);
    std::swap(m_power_talent_, other->m_power_talent_);
    std::swap(m_power_equip_, other->m_power_equip_);
    std::swap(m_power_tech_, other->m_power_tech_);
    std::swap(m_power_tower_, other->m_power_tower_);
    std::swap(m_power_lose_, other->m_power_lose_);
    std::swap(m_soldier_sum_, other->m_soldier_sum_);
    std::swap(m_soldier_kill_, other->m_soldier_kill_);
    m_kills_.Swap(&other->m_kills_);
    std::swap(m_soldier_die_, other->m_soldier_die_);
    m_dies_.Swap(&other->m_dies_);
    std::swap(m_soldier_hurt_, other->m_soldier_hurt_);
    m_hurts_.Swap(&other->m_hurts_);
    std::swap(m_soldier_live_, other->m_soldier_live_);
    m_lives_.Swap(&other->m_lives_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoldierOverView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoldierOverView_descriptor_;
  metadata.reflection = SoldierOverView_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoldierDetail::kMSoldieridFieldNumber;
const int SoldierDetail::kMNumFieldNumber;
const int SoldierDetail::kMDieFieldNumber;
const int SoldierDetail::kMHurtFieldNumber;
const int SoldierDetail::kMLiveFieldNumber;
const int SoldierDetail::kMDamageFieldNumber;
const int SoldierDetail::kMAttackComFieldNumber;
const int SoldierDetail::kMAttackSkillFieldNumber;
const int SoldierDetail::kMDamageComFieldNumber;
const int SoldierDetail::kMDamageSkillFieldNumber;
const int SoldierDetail::kMDamagesFieldNumber;
const int SoldierDetail::kMKillsFieldNumber;
#endif  // !_MSC_VER

SoldierDetail::SoldierDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.SoldierDetail)
}

void SoldierDetail::InitAsDefaultInstance() {
}

SoldierDetail::SoldierDetail(const SoldierDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.SoldierDetail)
}

void SoldierDetail::SharedCtor() {
  _cached_size_ = 0;
  m_soldierid_ = 0u;
  m_num_ = 0u;
  m_die_ = 0u;
  m_hurt_ = 0u;
  m_live_ = 0u;
  m_damage_ = 0u;
  m_attack_com_ = 0u;
  m_attack_skill_ = 0u;
  m_damage_com_ = 0u;
  m_damage_skill_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoldierDetail::~SoldierDetail() {
  // @@protoc_insertion_point(destructor:MsgProto.SoldierDetail)
  SharedDtor();
}

void SoldierDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoldierDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoldierDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoldierDetail_descriptor_;
}

const SoldierDetail& SoldierDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

SoldierDetail* SoldierDetail::default_instance_ = NULL;

SoldierDetail* SoldierDetail::New() const {
  return new SoldierDetail;
}

void SoldierDetail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SoldierDetail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(m_soldierid_, m_attack_skill_);
  }
  ZR_(m_damage_com_, m_damage_skill_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  m_damages_.Clear();
  m_kills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoldierDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.SoldierDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 m_soldierid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_soldierid_)));
          set_has_m_soldierid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_num;
        break;
      }

      // optional uint32 m_num = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_die;
        break;
      }

      // optional uint32 m_die = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_m_die:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_die_)));
          set_has_m_die();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_hurt;
        break;
      }

      // optional uint32 m_hurt = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_m_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_hurt_)));
          set_has_m_hurt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_m_live;
        break;
      }

      // optional uint32 m_live = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_m_live:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_live_)));
          set_has_m_live();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_m_damage;
        break;
      }

      // optional uint32 m_damage = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_m_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_damage_)));
          set_has_m_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_m_attack_com;
        break;
      }

      // optional uint32 m_attack_com = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_m_attack_com:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_attack_com_)));
          set_has_m_attack_com();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_m_attack_skill;
        break;
      }

      // optional uint32 m_attack_skill = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_m_attack_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_attack_skill_)));
          set_has_m_attack_skill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_m_damage_com;
        break;
      }

      // optional uint32 m_damage_com = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_m_damage_com:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_damage_com_)));
          set_has_m_damage_com();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_m_damage_skill;
        break;
      }

      // optional uint32 m_damage_skill = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_m_damage_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_damage_skill_)));
          set_has_m_damage_skill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_m_damages;
        break;
      }

      // repeated .MsgProto.SKeyValuePair m_damages = 11;
      case 11: {
        if (tag == 90) {
         parse_m_damages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_damages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_m_damages;
        if (input->ExpectTag(98)) goto parse_m_kills;
        break;
      }

      // repeated .MsgProto.SKeyValuePair m_kills = 12;
      case 12: {
        if (tag == 98) {
         parse_m_kills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_kills()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_m_kills;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.SoldierDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.SoldierDetail)
  return false;
#undef DO_
}

void SoldierDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.SoldierDetail)
  // optional uint32 m_soldierid = 1 [default = 0];
  if (has_m_soldierid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_soldierid(), output);
  }

  // optional uint32 m_num = 2 [default = 0];
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_num(), output);
  }

  // optional uint32 m_die = 3 [default = 0];
  if (has_m_die()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m_die(), output);
  }

  // optional uint32 m_hurt = 4 [default = 0];
  if (has_m_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->m_hurt(), output);
  }

  // optional uint32 m_live = 5 [default = 0];
  if (has_m_live()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->m_live(), output);
  }

  // optional uint32 m_damage = 6 [default = 0];
  if (has_m_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->m_damage(), output);
  }

  // optional uint32 m_attack_com = 7 [default = 0];
  if (has_m_attack_com()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->m_attack_com(), output);
  }

  // optional uint32 m_attack_skill = 8 [default = 0];
  if (has_m_attack_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->m_attack_skill(), output);
  }

  // optional uint32 m_damage_com = 9 [default = 0];
  if (has_m_damage_com()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->m_damage_com(), output);
  }

  // optional uint32 m_damage_skill = 10 [default = 0];
  if (has_m_damage_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->m_damage_skill(), output);
  }

  // repeated .MsgProto.SKeyValuePair m_damages = 11;
  for (int i = 0; i < this->m_damages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->m_damages(i), output);
  }

  // repeated .MsgProto.SKeyValuePair m_kills = 12;
  for (int i = 0; i < this->m_kills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->m_kills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.SoldierDetail)
}

::google::protobuf::uint8* SoldierDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.SoldierDetail)
  // optional uint32 m_soldierid = 1 [default = 0];
  if (has_m_soldierid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_soldierid(), target);
  }

  // optional uint32 m_num = 2 [default = 0];
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_num(), target);
  }

  // optional uint32 m_die = 3 [default = 0];
  if (has_m_die()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m_die(), target);
  }

  // optional uint32 m_hurt = 4 [default = 0];
  if (has_m_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->m_hurt(), target);
  }

  // optional uint32 m_live = 5 [default = 0];
  if (has_m_live()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->m_live(), target);
  }

  // optional uint32 m_damage = 6 [default = 0];
  if (has_m_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->m_damage(), target);
  }

  // optional uint32 m_attack_com = 7 [default = 0];
  if (has_m_attack_com()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->m_attack_com(), target);
  }

  // optional uint32 m_attack_skill = 8 [default = 0];
  if (has_m_attack_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->m_attack_skill(), target);
  }

  // optional uint32 m_damage_com = 9 [default = 0];
  if (has_m_damage_com()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->m_damage_com(), target);
  }

  // optional uint32 m_damage_skill = 10 [default = 0];
  if (has_m_damage_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->m_damage_skill(), target);
  }

  // repeated .MsgProto.SKeyValuePair m_damages = 11;
  for (int i = 0; i < this->m_damages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->m_damages(i), target);
  }

  // repeated .MsgProto.SKeyValuePair m_kills = 12;
  for (int i = 0; i < this->m_kills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->m_kills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.SoldierDetail)
  return target;
}

int SoldierDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 m_soldierid = 1 [default = 0];
    if (has_m_soldierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_soldierid());
    }

    // optional uint32 m_num = 2 [default = 0];
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_num());
    }

    // optional uint32 m_die = 3 [default = 0];
    if (has_m_die()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_die());
    }

    // optional uint32 m_hurt = 4 [default = 0];
    if (has_m_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_hurt());
    }

    // optional uint32 m_live = 5 [default = 0];
    if (has_m_live()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_live());
    }

    // optional uint32 m_damage = 6 [default = 0];
    if (has_m_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_damage());
    }

    // optional uint32 m_attack_com = 7 [default = 0];
    if (has_m_attack_com()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_attack_com());
    }

    // optional uint32 m_attack_skill = 8 [default = 0];
    if (has_m_attack_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_attack_skill());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 m_damage_com = 9 [default = 0];
    if (has_m_damage_com()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_damage_com());
    }

    // optional uint32 m_damage_skill = 10 [default = 0];
    if (has_m_damage_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_damage_skill());
    }

  }
  // repeated .MsgProto.SKeyValuePair m_damages = 11;
  total_size += 1 * this->m_damages_size();
  for (int i = 0; i < this->m_damages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_damages(i));
  }

  // repeated .MsgProto.SKeyValuePair m_kills = 12;
  total_size += 1 * this->m_kills_size();
  for (int i = 0; i < this->m_kills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_kills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoldierDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoldierDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoldierDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoldierDetail::MergeFrom(const SoldierDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_damages_.MergeFrom(from.m_damages_);
  m_kills_.MergeFrom(from.m_kills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_soldierid()) {
      set_m_soldierid(from.m_soldierid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_die()) {
      set_m_die(from.m_die());
    }
    if (from.has_m_hurt()) {
      set_m_hurt(from.m_hurt());
    }
    if (from.has_m_live()) {
      set_m_live(from.m_live());
    }
    if (from.has_m_damage()) {
      set_m_damage(from.m_damage());
    }
    if (from.has_m_attack_com()) {
      set_m_attack_com(from.m_attack_com());
    }
    if (from.has_m_attack_skill()) {
      set_m_attack_skill(from.m_attack_skill());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_damage_com()) {
      set_m_damage_com(from.m_damage_com());
    }
    if (from.has_m_damage_skill()) {
      set_m_damage_skill(from.m_damage_skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoldierDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoldierDetail::CopyFrom(const SoldierDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoldierDetail::IsInitialized() const {

  return true;
}

void SoldierDetail::Swap(SoldierDetail* other) {
  if (other != this) {
    std::swap(m_soldierid_, other->m_soldierid_);
    std::swap(m_num_, other->m_num_);
    std::swap(m_die_, other->m_die_);
    std::swap(m_hurt_, other->m_hurt_);
    std::swap(m_live_, other->m_live_);
    std::swap(m_damage_, other->m_damage_);
    std::swap(m_attack_com_, other->m_attack_com_);
    std::swap(m_attack_skill_, other->m_attack_skill_);
    std::swap(m_damage_com_, other->m_damage_com_);
    std::swap(m_damage_skill_, other->m_damage_skill_);
    m_damages_.Swap(&other->m_damages_);
    m_kills_.Swap(&other->m_kills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoldierDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoldierDetail_descriptor_;
  metadata.reflection = SoldierDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArmyFightDetail::kMSoldiersFieldNumber;
#endif  // !_MSC_VER

ArmyFightDetail::ArmyFightDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.ArmyFightDetail)
}

void ArmyFightDetail::InitAsDefaultInstance() {
}

ArmyFightDetail::ArmyFightDetail(const ArmyFightDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.ArmyFightDetail)
}

void ArmyFightDetail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArmyFightDetail::~ArmyFightDetail() {
  // @@protoc_insertion_point(destructor:MsgProto.ArmyFightDetail)
  SharedDtor();
}

void ArmyFightDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArmyFightDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArmyFightDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArmyFightDetail_descriptor_;
}

const ArmyFightDetail& ArmyFightDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

ArmyFightDetail* ArmyFightDetail::default_instance_ = NULL;

ArmyFightDetail* ArmyFightDetail::New() const {
  return new ArmyFightDetail;
}

void ArmyFightDetail::Clear() {
  m_soldiers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArmyFightDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.ArmyFightDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgProto.SoldierDetail m_soldiers = 1;
      case 1: {
        if (tag == 10) {
         parse_m_soldiers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_soldiers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_m_soldiers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.ArmyFightDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.ArmyFightDetail)
  return false;
#undef DO_
}

void ArmyFightDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.ArmyFightDetail)
  // repeated .MsgProto.SoldierDetail m_soldiers = 1;
  for (int i = 0; i < this->m_soldiers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_soldiers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.ArmyFightDetail)
}

::google::protobuf::uint8* ArmyFightDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.ArmyFightDetail)
  // repeated .MsgProto.SoldierDetail m_soldiers = 1;
  for (int i = 0; i < this->m_soldiers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_soldiers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.ArmyFightDetail)
  return target;
}

int ArmyFightDetail::ByteSize() const {
  int total_size = 0;

  // repeated .MsgProto.SoldierDetail m_soldiers = 1;
  total_size += 1 * this->m_soldiers_size();
  for (int i = 0; i < this->m_soldiers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_soldiers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArmyFightDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArmyFightDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArmyFightDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArmyFightDetail::MergeFrom(const ArmyFightDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_soldiers_.MergeFrom(from.m_soldiers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArmyFightDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmyFightDetail::CopyFrom(const ArmyFightDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmyFightDetail::IsInitialized() const {

  return true;
}

void ArmyFightDetail::Swap(ArmyFightDetail* other) {
  if (other != this) {
    m_soldiers_.Swap(&other->m_soldiers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArmyFightDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArmyFightDetail_descriptor_;
  metadata.reflection = ArmyFightDetail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FightReport_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightReport_EResult_descriptor_;
}
bool FightReport_EResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FightReport_EResult FightReport::city_attack_win;
const FightReport_EResult FightReport::city_attack_lose;
const FightReport_EResult FightReport::city_def_win;
const FightReport_EResult FightReport::city_def_lose;
const FightReport_EResult FightReport::EResult_MIN;
const FightReport_EResult FightReport::EResult_MAX;
const int FightReport::EResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FightReport_EFightType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightReport_EFightType_descriptor_;
}
bool FightReport_EFightType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FightReport_EFightType FightReport::eft_tcity;
const FightReport_EFightType FightReport::eft_wild;
const FightReport_EFightType FightReport::eft_boss;
const FightReport_EFightType FightReport::EFightType_MIN;
const FightReport_EFightType FightReport::EFightType_MAX;
const int FightReport::EFightType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FightReport::kMResultFieldNumber;
const int FightReport::kMTypeFieldNumber;
const int FightReport::kMPosFromFieldNumber;
const int FightReport::kMTimeFieldNumber;
const int FightReport::kMRoundFieldNumber;
const int FightReport::kMAttackerFieldNumber;
const int FightReport::kMDeferFieldNumber;
const int FightReport::kMPlunderFieldNumber;
const int FightReport::kMAttViewFieldNumber;
const int FightReport::kMDefViewFieldNumber;
const int FightReport::kMAttDetailsFieldNumber;
const int FightReport::kMDefDetailsFieldNumber;
#endif  // !_MSC_VER

FightReport::FightReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.FightReport)
}

void FightReport::InitAsDefaultInstance() {
  m_pos_from_ = const_cast< ::MsgProto::WorldPos*>(&::MsgProto::WorldPos::default_instance());
  m_attacker_ = const_cast< ::MsgProto::RoleFightTitle*>(&::MsgProto::RoleFightTitle::default_instance());
  m_defer_ = const_cast< ::MsgProto::RoleFightTitle*>(&::MsgProto::RoleFightTitle::default_instance());
  m_att_view_ = const_cast< ::MsgProto::SoldierOverView*>(&::MsgProto::SoldierOverView::default_instance());
  m_def_view_ = const_cast< ::MsgProto::SoldierOverView*>(&::MsgProto::SoldierOverView::default_instance());
}

FightReport::FightReport(const FightReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.FightReport)
}

void FightReport::SharedCtor() {
  _cached_size_ = 0;
  m_result_ = 1;
  m_type_ = 1;
  m_pos_from_ = NULL;
  m_time_ = 0u;
  m_round_ = 0u;
  m_attacker_ = NULL;
  m_defer_ = NULL;
  m_att_view_ = NULL;
  m_def_view_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightReport::~FightReport() {
  // @@protoc_insertion_point(destructor:MsgProto.FightReport)
  SharedDtor();
}

void FightReport::SharedDtor() {
  if (this != default_instance_) {
    delete m_pos_from_;
    delete m_attacker_;
    delete m_defer_;
    delete m_att_view_;
    delete m_def_view_;
  }
}

void FightReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightReport_descriptor_;
}

const FightReport& FightReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

FightReport* FightReport::default_instance_ = NULL;

FightReport* FightReport::New() const {
  return new FightReport;
}

void FightReport::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FightReport*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(m_time_, m_round_);
    m_result_ = 1;
    m_type_ = 1;
    if (has_m_pos_from()) {
      if (m_pos_from_ != NULL) m_pos_from_->::MsgProto::WorldPos::Clear();
    }
    if (has_m_attacker()) {
      if (m_attacker_ != NULL) m_attacker_->::MsgProto::RoleFightTitle::Clear();
    }
    if (has_m_defer()) {
      if (m_defer_ != NULL) m_defer_->::MsgProto::RoleFightTitle::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_m_att_view()) {
      if (m_att_view_ != NULL) m_att_view_->::MsgProto::SoldierOverView::Clear();
    }
    if (has_m_def_view()) {
      if (m_def_view_ != NULL) m_def_view_->::MsgProto::SoldierOverView::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  m_plunder_.Clear();
  m_att_details_.Clear();
  m_def_details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.FightReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgProto.FightReport.EResult m_result = 1 [default = city_attack_win];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgProto::FightReport_EResult_IsValid(value)) {
            set_m_result(static_cast< ::MsgProto::FightReport_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional .MsgProto.FightReport.EFightType m_type = 2 [default = eft_tcity];
      case 2: {
        if (tag == 16) {
         parse_m_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgProto::FightReport_EFightType_IsValid(value)) {
            set_m_type(static_cast< ::MsgProto::FightReport_EFightType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_m_pos_from;
        break;
      }

      // optional .MsgProto.WorldPos m_pos_from = 3;
      case 3: {
        if (tag == 26) {
         parse_m_pos_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_pos_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_time;
        break;
      }

      // optional uint32 m_time = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_m_round;
        break;
      }

      // optional uint32 m_round = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_m_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_round_)));
          set_has_m_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_m_attacker;
        break;
      }

      // optional .MsgProto.RoleFightTitle m_attacker = 6;
      case 6: {
        if (tag == 50) {
         parse_m_attacker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_attacker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_m_defer;
        break;
      }

      // optional .MsgProto.RoleFightTitle m_defer = 7;
      case 7: {
        if (tag == 58) {
         parse_m_defer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_defer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_m_plunder;
        break;
      }

      // repeated .MsgProto.ResPlunder m_plunder = 8;
      case 8: {
        if (tag == 66) {
         parse_m_plunder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_plunder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_m_plunder;
        if (input->ExpectTag(74)) goto parse_m_att_view;
        break;
      }

      // optional .MsgProto.SoldierOverView m_att_view = 9;
      case 9: {
        if (tag == 74) {
         parse_m_att_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_att_view()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_m_def_view;
        break;
      }

      // optional .MsgProto.SoldierOverView m_def_view = 10;
      case 10: {
        if (tag == 82) {
         parse_m_def_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_def_view()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_m_att_details;
        break;
      }

      // repeated .MsgProto.ArmyFightDetail m_att_details = 11;
      case 11: {
        if (tag == 90) {
         parse_m_att_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_att_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_m_att_details;
        if (input->ExpectTag(98)) goto parse_m_def_details;
        break;
      }

      // repeated .MsgProto.ArmyFightDetail m_def_details = 12;
      case 12: {
        if (tag == 98) {
         parse_m_def_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_def_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_m_def_details;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.FightReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.FightReport)
  return false;
#undef DO_
}

void FightReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.FightReport)
  // optional .MsgProto.FightReport.EResult m_result = 1 [default = city_attack_win];
  if (has_m_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->m_result(), output);
  }

  // optional .MsgProto.FightReport.EFightType m_type = 2 [default = eft_tcity];
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->m_type(), output);
  }

  // optional .MsgProto.WorldPos m_pos_from = 3;
  if (has_m_pos_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_pos_from(), output);
  }

  // optional uint32 m_time = 4 [default = 0];
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->m_time(), output);
  }

  // optional uint32 m_round = 5 [default = 0];
  if (has_m_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->m_round(), output);
  }

  // optional .MsgProto.RoleFightTitle m_attacker = 6;
  if (has_m_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_attacker(), output);
  }

  // optional .MsgProto.RoleFightTitle m_defer = 7;
  if (has_m_defer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_defer(), output);
  }

  // repeated .MsgProto.ResPlunder m_plunder = 8;
  for (int i = 0; i < this->m_plunder_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_plunder(i), output);
  }

  // optional .MsgProto.SoldierOverView m_att_view = 9;
  if (has_m_att_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_att_view(), output);
  }

  // optional .MsgProto.SoldierOverView m_def_view = 10;
  if (has_m_def_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_def_view(), output);
  }

  // repeated .MsgProto.ArmyFightDetail m_att_details = 11;
  for (int i = 0; i < this->m_att_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->m_att_details(i), output);
  }

  // repeated .MsgProto.ArmyFightDetail m_def_details = 12;
  for (int i = 0; i < this->m_def_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->m_def_details(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.FightReport)
}

::google::protobuf::uint8* FightReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.FightReport)
  // optional .MsgProto.FightReport.EResult m_result = 1 [default = city_attack_win];
  if (has_m_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->m_result(), target);
  }

  // optional .MsgProto.FightReport.EFightType m_type = 2 [default = eft_tcity];
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->m_type(), target);
  }

  // optional .MsgProto.WorldPos m_pos_from = 3;
  if (has_m_pos_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_pos_from(), target);
  }

  // optional uint32 m_time = 4 [default = 0];
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->m_time(), target);
  }

  // optional uint32 m_round = 5 [default = 0];
  if (has_m_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->m_round(), target);
  }

  // optional .MsgProto.RoleFightTitle m_attacker = 6;
  if (has_m_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_attacker(), target);
  }

  // optional .MsgProto.RoleFightTitle m_defer = 7;
  if (has_m_defer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_defer(), target);
  }

  // repeated .MsgProto.ResPlunder m_plunder = 8;
  for (int i = 0; i < this->m_plunder_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_plunder(i), target);
  }

  // optional .MsgProto.SoldierOverView m_att_view = 9;
  if (has_m_att_view()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_att_view(), target);
  }

  // optional .MsgProto.SoldierOverView m_def_view = 10;
  if (has_m_def_view()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_def_view(), target);
  }

  // repeated .MsgProto.ArmyFightDetail m_att_details = 11;
  for (int i = 0; i < this->m_att_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->m_att_details(i), target);
  }

  // repeated .MsgProto.ArmyFightDetail m_def_details = 12;
  for (int i = 0; i < this->m_def_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->m_def_details(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.FightReport)
  return target;
}

int FightReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgProto.FightReport.EResult m_result = 1 [default = city_attack_win];
    if (has_m_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m_result());
    }

    // optional .MsgProto.FightReport.EFightType m_type = 2 [default = eft_tcity];
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m_type());
    }

    // optional .MsgProto.WorldPos m_pos_from = 3;
    if (has_m_pos_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_pos_from());
    }

    // optional uint32 m_time = 4 [default = 0];
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_time());
    }

    // optional uint32 m_round = 5 [default = 0];
    if (has_m_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_round());
    }

    // optional .MsgProto.RoleFightTitle m_attacker = 6;
    if (has_m_attacker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_attacker());
    }

    // optional .MsgProto.RoleFightTitle m_defer = 7;
    if (has_m_defer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_defer());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .MsgProto.SoldierOverView m_att_view = 9;
    if (has_m_att_view()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_att_view());
    }

    // optional .MsgProto.SoldierOverView m_def_view = 10;
    if (has_m_def_view()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_def_view());
    }

  }
  // repeated .MsgProto.ResPlunder m_plunder = 8;
  total_size += 1 * this->m_plunder_size();
  for (int i = 0; i < this->m_plunder_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_plunder(i));
  }

  // repeated .MsgProto.ArmyFightDetail m_att_details = 11;
  total_size += 1 * this->m_att_details_size();
  for (int i = 0; i < this->m_att_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_att_details(i));
  }

  // repeated .MsgProto.ArmyFightDetail m_def_details = 12;
  total_size += 1 * this->m_def_details_size();
  for (int i = 0; i < this->m_def_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_def_details(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightReport::MergeFrom(const FightReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_plunder_.MergeFrom(from.m_plunder_);
  m_att_details_.MergeFrom(from.m_att_details_);
  m_def_details_.MergeFrom(from.m_def_details_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_result()) {
      set_m_result(from.m_result());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_pos_from()) {
      mutable_m_pos_from()->::MsgProto::WorldPos::MergeFrom(from.m_pos_from());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
    if (from.has_m_round()) {
      set_m_round(from.m_round());
    }
    if (from.has_m_attacker()) {
      mutable_m_attacker()->::MsgProto::RoleFightTitle::MergeFrom(from.m_attacker());
    }
    if (from.has_m_defer()) {
      mutable_m_defer()->::MsgProto::RoleFightTitle::MergeFrom(from.m_defer());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_att_view()) {
      mutable_m_att_view()->::MsgProto::SoldierOverView::MergeFrom(from.m_att_view());
    }
    if (from.has_m_def_view()) {
      mutable_m_def_view()->::MsgProto::SoldierOverView::MergeFrom(from.m_def_view());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightReport::CopyFrom(const FightReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightReport::IsInitialized() const {

  return true;
}

void FightReport::Swap(FightReport* other) {
  if (other != this) {
    std::swap(m_result_, other->m_result_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_pos_from_, other->m_pos_from_);
    std::swap(m_time_, other->m_time_);
    std::swap(m_round_, other->m_round_);
    std::swap(m_attacker_, other->m_attacker_);
    std::swap(m_defer_, other->m_defer_);
    m_plunder_.Swap(&other->m_plunder_);
    std::swap(m_att_view_, other->m_att_view_);
    std::swap(m_def_view_, other->m_def_view_);
    m_att_details_.Swap(&other->m_att_details_);
    m_def_details_.Swap(&other->m_def_details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightReport_descriptor_;
  metadata.reflection = FightReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResReport::kMTableidFieldNumber;
const int ResReport::kMNumFieldNumber;
const int ResReport::kMPosFieldNumber;
const int ResReport::kMTimestampFieldNumber;
#endif  // !_MSC_VER

ResReport::ResReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.ResReport)
}

void ResReport::InitAsDefaultInstance() {
  m_pos_ = const_cast< ::MsgProto::WorldPos*>(&::MsgProto::WorldPos::default_instance());
}

ResReport::ResReport(const ResReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.ResReport)
}

void ResReport::SharedCtor() {
  _cached_size_ = 0;
  m_tableid_ = 0u;
  m_num_ = 0u;
  m_pos_ = NULL;
  m_timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResReport::~ResReport() {
  // @@protoc_insertion_point(destructor:MsgProto.ResReport)
  SharedDtor();
}

void ResReport::SharedDtor() {
  if (this != default_instance_) {
    delete m_pos_;
  }
}

void ResReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResReport_descriptor_;
}

const ResReport& ResReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

ResReport* ResReport::default_instance_ = NULL;

ResReport* ResReport::New() const {
  return new ResReport;
}

void ResReport::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResReport*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(m_tableid_, m_num_);
    if (has_m_pos()) {
      if (m_pos_ != NULL) m_pos_->::MsgProto::WorldPos::Clear();
    }
    m_timestamp_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.ResReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 m_tableid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_tableid_)));
          set_has_m_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_num;
        break;
      }

      // optional uint32 m_num = 2;
      case 2: {
        if (tag == 16) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_m_pos;
        break;
      }

      // optional .MsgProto.WorldPos m_pos = 3;
      case 3: {
        if (tag == 26) {
         parse_m_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_timestamp;
        break;
      }

      // optional uint64 m_timestamp = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_m_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_timestamp_)));
          set_has_m_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.ResReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.ResReport)
  return false;
#undef DO_
}

void ResReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.ResReport)
  // optional uint32 m_tableid = 1;
  if (has_m_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_tableid(), output);
  }

  // optional uint32 m_num = 2;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_num(), output);
  }

  // optional .MsgProto.WorldPos m_pos = 3;
  if (has_m_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_pos(), output);
  }

  // optional uint64 m_timestamp = 4 [default = 0];
  if (has_m_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->m_timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.ResReport)
}

::google::protobuf::uint8* ResReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.ResReport)
  // optional uint32 m_tableid = 1;
  if (has_m_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_tableid(), target);
  }

  // optional uint32 m_num = 2;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_num(), target);
  }

  // optional .MsgProto.WorldPos m_pos = 3;
  if (has_m_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_pos(), target);
  }

  // optional uint64 m_timestamp = 4 [default = 0];
  if (has_m_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->m_timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.ResReport)
  return target;
}

int ResReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 m_tableid = 1;
    if (has_m_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_tableid());
    }

    // optional uint32 m_num = 2;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_num());
    }

    // optional .MsgProto.WorldPos m_pos = 3;
    if (has_m_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_pos());
    }

    // optional uint64 m_timestamp = 4 [default = 0];
    if (has_m_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->m_timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResReport::MergeFrom(const ResReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_tableid()) {
      set_m_tableid(from.m_tableid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_pos()) {
      mutable_m_pos()->::MsgProto::WorldPos::MergeFrom(from.m_pos());
    }
    if (from.has_m_timestamp()) {
      set_m_timestamp(from.m_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResReport::CopyFrom(const ResReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResReport::IsInitialized() const {

  return true;
}

void ResReport::Swap(ResReport* other) {
  if (other != this) {
    std::swap(m_tableid_, other->m_tableid_);
    std::swap(m_num_, other->m_num_);
    std::swap(m_pos_, other->m_pos_);
    std::swap(m_timestamp_, other->m_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResReport_descriptor_;
  metadata.reflection = ResReport_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FightReportMini_EResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightReportMini_EResult_descriptor_;
}
bool FightReportMini_EResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FightReportMini_EResult FightReportMini::fight_ini;
const FightReportMini_EResult FightReportMini::fight_win;
const FightReportMini_EResult FightReportMini::fight_lose;
const FightReportMini_EResult FightReportMini::EResult_MIN;
const FightReportMini_EResult FightReportMini::EResult_MAX;
const int FightReportMini::EResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FightReportMini::kMIdFieldNumber;
const int FightReportMini::kMTypeFieldNumber;
const int FightReportMini::kMLoseFieldNumber;
const int FightReportMini::kMKillFieldNumber;
const int FightReportMini::kMTimestampFieldNumber;
const int FightReportMini::kMResSumFieldNumber;
#endif  // !_MSC_VER

FightReportMini::FightReportMini()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.FightReportMini)
}

void FightReportMini::InitAsDefaultInstance() {
}

FightReportMini::FightReportMini(const FightReportMini& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.FightReportMini)
}

void FightReportMini::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0u;
  m_type_ = 0;
  m_lose_ = 0u;
  m_kill_ = 0u;
  m_timestamp_ = GOOGLE_ULONGLONG(0);
  m_res_sum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightReportMini::~FightReportMini() {
  // @@protoc_insertion_point(destructor:MsgProto.FightReportMini)
  SharedDtor();
}

void FightReportMini::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FightReportMini::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightReportMini::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightReportMini_descriptor_;
}

const FightReportMini& FightReportMini::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

FightReportMini* FightReportMini::default_instance_ = NULL;

FightReportMini* FightReportMini::New() const {
  return new FightReportMini;
}

void FightReportMini::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FightReportMini*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(m_id_, m_res_sum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightReportMini::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.FightReportMini)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 m_id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional .MsgProto.FightReportMini.EResult m_type = 2 [default = fight_ini];
      case 2: {
        if (tag == 16) {
         parse_m_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgProto::FightReportMini_EResult_IsValid(value)) {
            set_m_type(static_cast< ::MsgProto::FightReportMini_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_lose;
        break;
      }

      // optional uint32 m_lose = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_m_lose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_lose_)));
          set_has_m_lose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_kill;
        break;
      }

      // optional uint32 m_kill = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_m_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_kill_)));
          set_has_m_kill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_m_timestamp;
        break;
      }

      // optional uint64 m_timestamp = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_m_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_timestamp_)));
          set_has_m_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_m_res_sum;
        break;
      }

      // optional uint32 m_res_sum = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_m_res_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_res_sum_)));
          set_has_m_res_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.FightReportMini)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.FightReportMini)
  return false;
#undef DO_
}

void FightReportMini::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.FightReportMini)
  // optional uint32 m_id = 1 [default = 0];
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_id(), output);
  }

  // optional .MsgProto.FightReportMini.EResult m_type = 2 [default = fight_ini];
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->m_type(), output);
  }

  // optional uint32 m_lose = 3 [default = 0];
  if (has_m_lose()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m_lose(), output);
  }

  // optional uint32 m_kill = 4 [default = 0];
  if (has_m_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->m_kill(), output);
  }

  // optional uint64 m_timestamp = 5 [default = 0];
  if (has_m_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->m_timestamp(), output);
  }

  // optional uint32 m_res_sum = 6 [default = 0];
  if (has_m_res_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->m_res_sum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.FightReportMini)
}

::google::protobuf::uint8* FightReportMini::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.FightReportMini)
  // optional uint32 m_id = 1 [default = 0];
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_id(), target);
  }

  // optional .MsgProto.FightReportMini.EResult m_type = 2 [default = fight_ini];
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->m_type(), target);
  }

  // optional uint32 m_lose = 3 [default = 0];
  if (has_m_lose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m_lose(), target);
  }

  // optional uint32 m_kill = 4 [default = 0];
  if (has_m_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->m_kill(), target);
  }

  // optional uint64 m_timestamp = 5 [default = 0];
  if (has_m_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->m_timestamp(), target);
  }

  // optional uint32 m_res_sum = 6 [default = 0];
  if (has_m_res_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->m_res_sum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.FightReportMini)
  return target;
}

int FightReportMini::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 m_id = 1 [default = 0];
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_id());
    }

    // optional .MsgProto.FightReportMini.EResult m_type = 2 [default = fight_ini];
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m_type());
    }

    // optional uint32 m_lose = 3 [default = 0];
    if (has_m_lose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_lose());
    }

    // optional uint32 m_kill = 4 [default = 0];
    if (has_m_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_kill());
    }

    // optional uint64 m_timestamp = 5 [default = 0];
    if (has_m_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->m_timestamp());
    }

    // optional uint32 m_res_sum = 6 [default = 0];
    if (has_m_res_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_res_sum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightReportMini::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightReportMini* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightReportMini*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightReportMini::MergeFrom(const FightReportMini& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_lose()) {
      set_m_lose(from.m_lose());
    }
    if (from.has_m_kill()) {
      set_m_kill(from.m_kill());
    }
    if (from.has_m_timestamp()) {
      set_m_timestamp(from.m_timestamp());
    }
    if (from.has_m_res_sum()) {
      set_m_res_sum(from.m_res_sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightReportMini::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightReportMini::CopyFrom(const FightReportMini& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightReportMini::IsInitialized() const {

  return true;
}

void FightReportMini::Swap(FightReportMini* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_lose_, other->m_lose_);
    std::swap(m_kill_, other->m_kill_);
    std::swap(m_timestamp_, other->m_timestamp_);
    std::swap(m_res_sum_, other->m_res_sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightReportMini::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightReportMini_descriptor_;
  metadata.reflection = FightReportMini_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvestReportMini::kMIsSuccedFieldNumber;
const int InvestReportMini::kMCityidFieldNumber;
const int InvestReportMini::kMViewFieldNumber;
const int InvestReportMini::kMResFieldNumber;
const int InvestReportMini::kMArmysFieldNumber;
const int InvestReportMini::kMDvCurFieldNumber;
const int InvestReportMini::kMDvSumFieldNumber;
#endif  // !_MSC_VER

InvestReportMini::InvestReportMini()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.InvestReportMini)
}

void InvestReportMini::InitAsDefaultInstance() {
  m_view_ = const_cast< ::MsgProto::WorldView*>(&::MsgProto::WorldView::default_instance());
}

InvestReportMini::InvestReportMini(const InvestReportMini& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.InvestReportMini)
}

void InvestReportMini::SharedCtor() {
  _cached_size_ = 0;
  m_is_succed_ = true;
  m_cityid_ = 0u;
  m_view_ = NULL;
  m_dv_cur_ = 0u;
  m_dv_sum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvestReportMini::~InvestReportMini() {
  // @@protoc_insertion_point(destructor:MsgProto.InvestReportMini)
  SharedDtor();
}

void InvestReportMini::SharedDtor() {
  if (this != default_instance_) {
    delete m_view_;
  }
}

void InvestReportMini::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvestReportMini::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvestReportMini_descriptor_;
}

const InvestReportMini& InvestReportMini::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

InvestReportMini* InvestReportMini::default_instance_ = NULL;

InvestReportMini* InvestReportMini::New() const {
  return new InvestReportMini;
}

void InvestReportMini::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InvestReportMini*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 103) {
    ZR_(m_dv_cur_, m_dv_sum_);
    m_is_succed_ = true;
    m_cityid_ = 0u;
    if (has_m_view()) {
      if (m_view_ != NULL) m_view_->::MsgProto::WorldView::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  m_res_.Clear();
  m_armys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvestReportMini::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.InvestReportMini)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool m_is_succed = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_is_succed_)));
          set_has_m_is_succed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_cityid;
        break;
      }

      // optional uint32 m_cityid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_cityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_cityid_)));
          set_has_m_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_m_view;
        break;
      }

      // optional .MsgProto.WorldView m_view = 3;
      case 3: {
        if (tag == 26) {
         parse_m_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_view()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_m_res;
        break;
      }

      // repeated .MsgProto.ResInvestReport m_res = 4;
      case 4: {
        if (tag == 34) {
         parse_m_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_m_res;
        if (input->ExpectTag(42)) goto parse_m_armys;
        break;
      }

      // repeated .MsgProto.ArmyInvestReport m_armys = 5;
      case 5: {
        if (tag == 42) {
         parse_m_armys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_armys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_m_armys;
        if (input->ExpectTag(48)) goto parse_m_dv_cur;
        break;
      }

      // optional uint32 m_dv_cur = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_m_dv_cur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_dv_cur_)));
          set_has_m_dv_cur();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_m_dv_sum;
        break;
      }

      // optional uint32 m_dv_sum = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_m_dv_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_dv_sum_)));
          set_has_m_dv_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.InvestReportMini)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.InvestReportMini)
  return false;
#undef DO_
}

void InvestReportMini::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.InvestReportMini)
  // optional bool m_is_succed = 1 [default = true];
  if (has_m_is_succed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->m_is_succed(), output);
  }

  // optional uint32 m_cityid = 2 [default = 0];
  if (has_m_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_cityid(), output);
  }

  // optional .MsgProto.WorldView m_view = 3;
  if (has_m_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_view(), output);
  }

  // repeated .MsgProto.ResInvestReport m_res = 4;
  for (int i = 0; i < this->m_res_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_res(i), output);
  }

  // repeated .MsgProto.ArmyInvestReport m_armys = 5;
  for (int i = 0; i < this->m_armys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_armys(i), output);
  }

  // optional uint32 m_dv_cur = 6 [default = 0];
  if (has_m_dv_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->m_dv_cur(), output);
  }

  // optional uint32 m_dv_sum = 7 [default = 0];
  if (has_m_dv_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->m_dv_sum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.InvestReportMini)
}

::google::protobuf::uint8* InvestReportMini::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.InvestReportMini)
  // optional bool m_is_succed = 1 [default = true];
  if (has_m_is_succed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->m_is_succed(), target);
  }

  // optional uint32 m_cityid = 2 [default = 0];
  if (has_m_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_cityid(), target);
  }

  // optional .MsgProto.WorldView m_view = 3;
  if (has_m_view()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_view(), target);
  }

  // repeated .MsgProto.ResInvestReport m_res = 4;
  for (int i = 0; i < this->m_res_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_res(i), target);
  }

  // repeated .MsgProto.ArmyInvestReport m_armys = 5;
  for (int i = 0; i < this->m_armys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_armys(i), target);
  }

  // optional uint32 m_dv_cur = 6 [default = 0];
  if (has_m_dv_cur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->m_dv_cur(), target);
  }

  // optional uint32 m_dv_sum = 7 [default = 0];
  if (has_m_dv_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->m_dv_sum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.InvestReportMini)
  return target;
}

int InvestReportMini::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool m_is_succed = 1 [default = true];
    if (has_m_is_succed()) {
      total_size += 1 + 1;
    }

    // optional uint32 m_cityid = 2 [default = 0];
    if (has_m_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_cityid());
    }

    // optional .MsgProto.WorldView m_view = 3;
    if (has_m_view()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_view());
    }

    // optional uint32 m_dv_cur = 6 [default = 0];
    if (has_m_dv_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_dv_cur());
    }

    // optional uint32 m_dv_sum = 7 [default = 0];
    if (has_m_dv_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_dv_sum());
    }

  }
  // repeated .MsgProto.ResInvestReport m_res = 4;
  total_size += 1 * this->m_res_size();
  for (int i = 0; i < this->m_res_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_res(i));
  }

  // repeated .MsgProto.ArmyInvestReport m_armys = 5;
  total_size += 1 * this->m_armys_size();
  for (int i = 0; i < this->m_armys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_armys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvestReportMini::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvestReportMini* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvestReportMini*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvestReportMini::MergeFrom(const InvestReportMini& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_res_.MergeFrom(from.m_res_);
  m_armys_.MergeFrom(from.m_armys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_is_succed()) {
      set_m_is_succed(from.m_is_succed());
    }
    if (from.has_m_cityid()) {
      set_m_cityid(from.m_cityid());
    }
    if (from.has_m_view()) {
      mutable_m_view()->::MsgProto::WorldView::MergeFrom(from.m_view());
    }
    if (from.has_m_dv_cur()) {
      set_m_dv_cur(from.m_dv_cur());
    }
    if (from.has_m_dv_sum()) {
      set_m_dv_sum(from.m_dv_sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvestReportMini::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvestReportMini::CopyFrom(const InvestReportMini& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvestReportMini::IsInitialized() const {

  return true;
}

void InvestReportMini::Swap(InvestReportMini* other) {
  if (other != this) {
    std::swap(m_is_succed_, other->m_is_succed_);
    std::swap(m_cityid_, other->m_cityid_);
    std::swap(m_view_, other->m_view_);
    m_res_.Swap(&other->m_res_);
    m_armys_.Swap(&other->m_armys_);
    std::swap(m_dv_cur_, other->m_dv_cur_);
    std::swap(m_dv_sum_, other->m_dv_sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvestReportMini::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvestReportMini_descriptor_;
  metadata.reflection = InvestReportMini_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArmyInvestReport::kMSoldiersFieldNumber;
#endif  // !_MSC_VER

ArmyInvestReport::ArmyInvestReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.ArmyInvestReport)
}

void ArmyInvestReport::InitAsDefaultInstance() {
}

ArmyInvestReport::ArmyInvestReport(const ArmyInvestReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.ArmyInvestReport)
}

void ArmyInvestReport::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArmyInvestReport::~ArmyInvestReport() {
  // @@protoc_insertion_point(destructor:MsgProto.ArmyInvestReport)
  SharedDtor();
}

void ArmyInvestReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArmyInvestReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArmyInvestReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArmyInvestReport_descriptor_;
}

const ArmyInvestReport& ArmyInvestReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

ArmyInvestReport* ArmyInvestReport::default_instance_ = NULL;

ArmyInvestReport* ArmyInvestReport::New() const {
  return new ArmyInvestReport;
}

void ArmyInvestReport::Clear() {
  m_soldiers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArmyInvestReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.ArmyInvestReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgProto.RoleSoldier m_soldiers = 1;
      case 1: {
        if (tag == 10) {
         parse_m_soldiers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_soldiers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_m_soldiers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.ArmyInvestReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.ArmyInvestReport)
  return false;
#undef DO_
}

void ArmyInvestReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.ArmyInvestReport)
  // repeated .MsgProto.RoleSoldier m_soldiers = 1;
  for (int i = 0; i < this->m_soldiers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_soldiers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.ArmyInvestReport)
}

::google::protobuf::uint8* ArmyInvestReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.ArmyInvestReport)
  // repeated .MsgProto.RoleSoldier m_soldiers = 1;
  for (int i = 0; i < this->m_soldiers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_soldiers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.ArmyInvestReport)
  return target;
}

int ArmyInvestReport::ByteSize() const {
  int total_size = 0;

  // repeated .MsgProto.RoleSoldier m_soldiers = 1;
  total_size += 1 * this->m_soldiers_size();
  for (int i = 0; i < this->m_soldiers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_soldiers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArmyInvestReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArmyInvestReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArmyInvestReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArmyInvestReport::MergeFrom(const ArmyInvestReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_soldiers_.MergeFrom(from.m_soldiers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArmyInvestReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmyInvestReport::CopyFrom(const ArmyInvestReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmyInvestReport::IsInitialized() const {

  return true;
}

void ArmyInvestReport::Swap(ArmyInvestReport* other) {
  if (other != this) {
    m_soldiers_.Swap(&other->m_soldiers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArmyInvestReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArmyInvestReport_descriptor_;
  metadata.reflection = ArmyInvestReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResInvestReport::kMResTypeFieldNumber;
const int ResInvestReport::kMResGetFieldNumber;
const int ResInvestReport::kMResUngetFieldNumber;
#endif  // !_MSC_VER

ResInvestReport::ResInvestReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.ResInvestReport)
}

void ResInvestReport::InitAsDefaultInstance() {
}

ResInvestReport::ResInvestReport(const ResInvestReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.ResInvestReport)
}

void ResInvestReport::SharedCtor() {
  _cached_size_ = 0;
  m_res_type_ = 0u;
  m_res_get_ = 0u;
  m_res_unget_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResInvestReport::~ResInvestReport() {
  // @@protoc_insertion_point(destructor:MsgProto.ResInvestReport)
  SharedDtor();
}

void ResInvestReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResInvestReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResInvestReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResInvestReport_descriptor_;
}

const ResInvestReport& ResInvestReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

ResInvestReport* ResInvestReport::default_instance_ = NULL;

ResInvestReport* ResInvestReport::New() const {
  return new ResInvestReport;
}

void ResInvestReport::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResInvestReport*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(m_res_type_, m_res_unget_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResInvestReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.ResInvestReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 m_res_type = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_res_type_)));
          set_has_m_res_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_res_get;
        break;
      }

      // optional uint32 m_res_get = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_res_get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_res_get_)));
          set_has_m_res_get();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_res_unget;
        break;
      }

      // optional uint32 m_res_unget = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_m_res_unget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_res_unget_)));
          set_has_m_res_unget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.ResInvestReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.ResInvestReport)
  return false;
#undef DO_
}

void ResInvestReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.ResInvestReport)
  // optional uint32 m_res_type = 1 [default = 0];
  if (has_m_res_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_res_type(), output);
  }

  // optional uint32 m_res_get = 2 [default = 0];
  if (has_m_res_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_res_get(), output);
  }

  // optional uint32 m_res_unget = 3 [default = 0];
  if (has_m_res_unget()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m_res_unget(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.ResInvestReport)
}

::google::protobuf::uint8* ResInvestReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.ResInvestReport)
  // optional uint32 m_res_type = 1 [default = 0];
  if (has_m_res_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_res_type(), target);
  }

  // optional uint32 m_res_get = 2 [default = 0];
  if (has_m_res_get()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_res_get(), target);
  }

  // optional uint32 m_res_unget = 3 [default = 0];
  if (has_m_res_unget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m_res_unget(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.ResInvestReport)
  return target;
}

int ResInvestReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 m_res_type = 1 [default = 0];
    if (has_m_res_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_res_type());
    }

    // optional uint32 m_res_get = 2 [default = 0];
    if (has_m_res_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_res_get());
    }

    // optional uint32 m_res_unget = 3 [default = 0];
    if (has_m_res_unget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_res_unget());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResInvestReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResInvestReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResInvestReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResInvestReport::MergeFrom(const ResInvestReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_res_type()) {
      set_m_res_type(from.m_res_type());
    }
    if (from.has_m_res_get()) {
      set_m_res_get(from.m_res_get());
    }
    if (from.has_m_res_unget()) {
      set_m_res_unget(from.m_res_unget());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResInvestReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResInvestReport::CopyFrom(const ResInvestReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResInvestReport::IsInitialized() const {

  return true;
}

void ResInvestReport::Swap(ResInvestReport* other) {
  if (other != this) {
    std::swap(m_res_type_, other->m_res_type_);
    std::swap(m_res_get_, other->m_res_get_);
    std::swap(m_res_unget_, other->m_res_unget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResInvestReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResInvestReport_descriptor_;
  metadata.reflection = ResInvestReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvestigationReport::kMIsSuccedFieldNumber;
const int InvestigationReport::kMCityidFieldNumber;
const int InvestigationReport::kMViewFieldNumber;
const int InvestigationReport::kMResFieldNumber;
const int InvestigationReport::kMArmysFieldNumber;
const int InvestigationReport::kMDvCurFieldNumber;
const int InvestigationReport::kMDvSumFieldNumber;
#endif  // !_MSC_VER

InvestigationReport::InvestigationReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.InvestigationReport)
}

void InvestigationReport::InitAsDefaultInstance() {
  m_view_ = const_cast< ::MsgProto::WorldView*>(&::MsgProto::WorldView::default_instance());
}

InvestigationReport::InvestigationReport(const InvestigationReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.InvestigationReport)
}

void InvestigationReport::SharedCtor() {
  _cached_size_ = 0;
  m_is_succed_ = true;
  m_cityid_ = 0u;
  m_view_ = NULL;
  m_dv_cur_ = 0u;
  m_dv_sum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvestigationReport::~InvestigationReport() {
  // @@protoc_insertion_point(destructor:MsgProto.InvestigationReport)
  SharedDtor();
}

void InvestigationReport::SharedDtor() {
  if (this != default_instance_) {
    delete m_view_;
  }
}

void InvestigationReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvestigationReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvestigationReport_descriptor_;
}

const InvestigationReport& InvestigationReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

InvestigationReport* InvestigationReport::default_instance_ = NULL;

InvestigationReport* InvestigationReport::New() const {
  return new InvestigationReport;
}

void InvestigationReport::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InvestigationReport*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 103) {
    ZR_(m_dv_cur_, m_dv_sum_);
    m_is_succed_ = true;
    m_cityid_ = 0u;
    if (has_m_view()) {
      if (m_view_ != NULL) m_view_->::MsgProto::WorldView::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  m_res_.Clear();
  m_armys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvestigationReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.InvestigationReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool m_is_succed = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_is_succed_)));
          set_has_m_is_succed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_cityid;
        break;
      }

      // optional uint32 m_cityid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_cityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_cityid_)));
          set_has_m_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_m_view;
        break;
      }

      // optional .MsgProto.WorldView m_view = 3;
      case 3: {
        if (tag == 26) {
         parse_m_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_view()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_m_res;
        break;
      }

      // repeated .MsgProto.ResInvestReport m_res = 4;
      case 4: {
        if (tag == 34) {
         parse_m_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_m_res;
        if (input->ExpectTag(42)) goto parse_m_armys;
        break;
      }

      // repeated .MsgProto.ArmyInvestReport m_armys = 5;
      case 5: {
        if (tag == 42) {
         parse_m_armys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_armys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_m_armys;
        if (input->ExpectTag(48)) goto parse_m_dv_cur;
        break;
      }

      // optional uint32 m_dv_cur = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_m_dv_cur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_dv_cur_)));
          set_has_m_dv_cur();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_m_dv_sum;
        break;
      }

      // optional uint32 m_dv_sum = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_m_dv_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_dv_sum_)));
          set_has_m_dv_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.InvestigationReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.InvestigationReport)
  return false;
#undef DO_
}

void InvestigationReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.InvestigationReport)
  // optional bool m_is_succed = 1 [default = true];
  if (has_m_is_succed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->m_is_succed(), output);
  }

  // optional uint32 m_cityid = 2 [default = 0];
  if (has_m_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_cityid(), output);
  }

  // optional .MsgProto.WorldView m_view = 3;
  if (has_m_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_view(), output);
  }

  // repeated .MsgProto.ResInvestReport m_res = 4;
  for (int i = 0; i < this->m_res_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_res(i), output);
  }

  // repeated .MsgProto.ArmyInvestReport m_armys = 5;
  for (int i = 0; i < this->m_armys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_armys(i), output);
  }

  // optional uint32 m_dv_cur = 6 [default = 0];
  if (has_m_dv_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->m_dv_cur(), output);
  }

  // optional uint32 m_dv_sum = 7 [default = 0];
  if (has_m_dv_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->m_dv_sum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.InvestigationReport)
}

::google::protobuf::uint8* InvestigationReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.InvestigationReport)
  // optional bool m_is_succed = 1 [default = true];
  if (has_m_is_succed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->m_is_succed(), target);
  }

  // optional uint32 m_cityid = 2 [default = 0];
  if (has_m_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_cityid(), target);
  }

  // optional .MsgProto.WorldView m_view = 3;
  if (has_m_view()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_view(), target);
  }

  // repeated .MsgProto.ResInvestReport m_res = 4;
  for (int i = 0; i < this->m_res_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_res(i), target);
  }

  // repeated .MsgProto.ArmyInvestReport m_armys = 5;
  for (int i = 0; i < this->m_armys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_armys(i), target);
  }

  // optional uint32 m_dv_cur = 6 [default = 0];
  if (has_m_dv_cur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->m_dv_cur(), target);
  }

  // optional uint32 m_dv_sum = 7 [default = 0];
  if (has_m_dv_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->m_dv_sum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.InvestigationReport)
  return target;
}

int InvestigationReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool m_is_succed = 1 [default = true];
    if (has_m_is_succed()) {
      total_size += 1 + 1;
    }

    // optional uint32 m_cityid = 2 [default = 0];
    if (has_m_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_cityid());
    }

    // optional .MsgProto.WorldView m_view = 3;
    if (has_m_view()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_view());
    }

    // optional uint32 m_dv_cur = 6 [default = 0];
    if (has_m_dv_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_dv_cur());
    }

    // optional uint32 m_dv_sum = 7 [default = 0];
    if (has_m_dv_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_dv_sum());
    }

  }
  // repeated .MsgProto.ResInvestReport m_res = 4;
  total_size += 1 * this->m_res_size();
  for (int i = 0; i < this->m_res_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_res(i));
  }

  // repeated .MsgProto.ArmyInvestReport m_armys = 5;
  total_size += 1 * this->m_armys_size();
  for (int i = 0; i < this->m_armys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_armys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvestigationReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvestigationReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvestigationReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvestigationReport::MergeFrom(const InvestigationReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_res_.MergeFrom(from.m_res_);
  m_armys_.MergeFrom(from.m_armys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_is_succed()) {
      set_m_is_succed(from.m_is_succed());
    }
    if (from.has_m_cityid()) {
      set_m_cityid(from.m_cityid());
    }
    if (from.has_m_view()) {
      mutable_m_view()->::MsgProto::WorldView::MergeFrom(from.m_view());
    }
    if (from.has_m_dv_cur()) {
      set_m_dv_cur(from.m_dv_cur());
    }
    if (from.has_m_dv_sum()) {
      set_m_dv_sum(from.m_dv_sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvestigationReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvestigationReport::CopyFrom(const InvestigationReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvestigationReport::IsInitialized() const {

  return true;
}

void InvestigationReport::Swap(InvestigationReport* other) {
  if (other != this) {
    std::swap(m_is_succed_, other->m_is_succed_);
    std::swap(m_cityid_, other->m_cityid_);
    std::swap(m_view_, other->m_view_);
    m_res_.Swap(&other->m_res_);
    m_armys_.Swap(&other->m_armys_);
    std::swap(m_dv_cur_, other->m_dv_cur_);
    std::swap(m_dv_sum_, other->m_dv_sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvestigationReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvestigationReport_descriptor_;
  metadata.reflection = InvestigationReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportDB::kMRoleidFieldNumber;
const int ReportDB::kMTimeFieldNumber;
const int ReportDB::kMResFieldNumber;
const int ReportDB::kMFightMiniFieldNumber;
const int ReportDB::kMFightFieldNumber;
const int ReportDB::kMInvestFieldNumber;
#endif  // !_MSC_VER

ReportDB::ReportDB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgProto.ReportDB)
}

void ReportDB::InitAsDefaultInstance() {
  m_res_ = const_cast< ::MsgProto::ResReport*>(&::MsgProto::ResReport::default_instance());
  m_fight_mini_ = const_cast< ::MsgProto::FightReportMini*>(&::MsgProto::FightReportMini::default_instance());
  m_fight_ = const_cast< ::MsgProto::FightReport*>(&::MsgProto::FightReport::default_instance());
  m_invest_ = const_cast< ::MsgProto::InvestigationReport*>(&::MsgProto::InvestigationReport::default_instance());
}

ReportDB::ReportDB(const ReportDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgProto.ReportDB)
}

void ReportDB::SharedCtor() {
  _cached_size_ = 0;
  m_roleid_ = 0u;
  m_time_ = GOOGLE_ULONGLONG(0);
  m_res_ = NULL;
  m_fight_mini_ = NULL;
  m_fight_ = NULL;
  m_invest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportDB::~ReportDB() {
  // @@protoc_insertion_point(destructor:MsgProto.ReportDB)
  SharedDtor();
}

void ReportDB::SharedDtor() {
  if (this != default_instance_) {
    delete m_res_;
    delete m_fight_mini_;
    delete m_fight_;
    delete m_invest_;
  }
}

void ReportDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportDB_descriptor_;
}

const ReportDB& ReportDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgStruct_2eproto();
  return *default_instance_;
}

ReportDB* ReportDB::default_instance_ = NULL;

ReportDB* ReportDB::New() const {
  return new ReportDB;
}

void ReportDB::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    m_roleid_ = 0u;
    m_time_ = GOOGLE_ULONGLONG(0);
    if (has_m_res()) {
      if (m_res_ != NULL) m_res_->::MsgProto::ResReport::Clear();
    }
    if (has_m_fight_mini()) {
      if (m_fight_mini_ != NULL) m_fight_mini_->::MsgProto::FightReportMini::Clear();
    }
    if (has_m_fight()) {
      if (m_fight_ != NULL) m_fight_->::MsgProto::FightReport::Clear();
    }
    if (has_m_invest()) {
      if (m_invest_ != NULL) m_invest_->::MsgProto::InvestigationReport::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgProto.ReportDB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 m_roleid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_roleid_)));
          set_has_m_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_time;
        break;
      }

      // optional uint64 m_time = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_m_res;
        break;
      }

      // optional .MsgProto.ResReport m_res = 3;
      case 3: {
        if (tag == 26) {
         parse_m_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_m_fight_mini;
        break;
      }

      // optional .MsgProto.FightReportMini m_fight_mini = 4;
      case 4: {
        if (tag == 34) {
         parse_m_fight_mini:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_fight_mini()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_m_fight;
        break;
      }

      // optional .MsgProto.FightReport m_fight = 5;
      case 5: {
        if (tag == 42) {
         parse_m_fight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_fight()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_m_invest;
        break;
      }

      // optional .MsgProto.InvestigationReport m_invest = 6;
      case 6: {
        if (tag == 50) {
         parse_m_invest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_invest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgProto.ReportDB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgProto.ReportDB)
  return false;
#undef DO_
}

void ReportDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgProto.ReportDB)
  // optional uint32 m_roleid = 1 [default = 0];
  if (has_m_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_roleid(), output);
  }

  // optional uint64 m_time = 2 [default = 0];
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->m_time(), output);
  }

  // optional .MsgProto.ResReport m_res = 3;
  if (has_m_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_res(), output);
  }

  // optional .MsgProto.FightReportMini m_fight_mini = 4;
  if (has_m_fight_mini()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_fight_mini(), output);
  }

  // optional .MsgProto.FightReport m_fight = 5;
  if (has_m_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_fight(), output);
  }

  // optional .MsgProto.InvestigationReport m_invest = 6;
  if (has_m_invest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_invest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgProto.ReportDB)
}

::google::protobuf::uint8* ReportDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgProto.ReportDB)
  // optional uint32 m_roleid = 1 [default = 0];
  if (has_m_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_roleid(), target);
  }

  // optional uint64 m_time = 2 [default = 0];
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->m_time(), target);
  }

  // optional .MsgProto.ResReport m_res = 3;
  if (has_m_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_res(), target);
  }

  // optional .MsgProto.FightReportMini m_fight_mini = 4;
  if (has_m_fight_mini()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_fight_mini(), target);
  }

  // optional .MsgProto.FightReport m_fight = 5;
  if (has_m_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_fight(), target);
  }

  // optional .MsgProto.InvestigationReport m_invest = 6;
  if (has_m_invest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_invest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgProto.ReportDB)
  return target;
}

int ReportDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 m_roleid = 1 [default = 0];
    if (has_m_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_roleid());
    }

    // optional uint64 m_time = 2 [default = 0];
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->m_time());
    }

    // optional .MsgProto.ResReport m_res = 3;
    if (has_m_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_res());
    }

    // optional .MsgProto.FightReportMini m_fight_mini = 4;
    if (has_m_fight_mini()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_fight_mini());
    }

    // optional .MsgProto.FightReport m_fight = 5;
    if (has_m_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_fight());
    }

    // optional .MsgProto.InvestigationReport m_invest = 6;
    if (has_m_invest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_invest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportDB::MergeFrom(const ReportDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roleid()) {
      set_m_roleid(from.m_roleid());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
    if (from.has_m_res()) {
      mutable_m_res()->::MsgProto::ResReport::MergeFrom(from.m_res());
    }
    if (from.has_m_fight_mini()) {
      mutable_m_fight_mini()->::MsgProto::FightReportMini::MergeFrom(from.m_fight_mini());
    }
    if (from.has_m_fight()) {
      mutable_m_fight()->::MsgProto::FightReport::MergeFrom(from.m_fight());
    }
    if (from.has_m_invest()) {
      mutable_m_invest()->::MsgProto::InvestigationReport::MergeFrom(from.m_invest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportDB::CopyFrom(const ReportDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportDB::IsInitialized() const {

  return true;
}

void ReportDB::Swap(ReportDB* other) {
  if (other != this) {
    std::swap(m_roleid_, other->m_roleid_);
    std::swap(m_time_, other->m_time_);
    std::swap(m_res_, other->m_res_);
    std::swap(m_fight_mini_, other->m_fight_mini_);
    std::swap(m_fight_, other->m_fight_);
    std::swap(m_invest_, other->m_invest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportDB_descriptor_;
  metadata.reflection = ReportDB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgProto

// @@protoc_insertion_point(global_scope)
